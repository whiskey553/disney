/*!
 * /*
 *                ./ddmMMMMMMMMMMddm-                              -ddmMMMMMMMMMMddm\.
 *            .+ddMMMMMMMMMMMMMMMMMMMMd:                        :ddMMMMMMMMMMMMMMMMMMMMd+.
 *          :dMMMMMMMMMMMMMMMMMMMMMMMMMMd´                    `dMMMMMMMMMMMMMMMMMMMMMMMMMd:
 *        .dDMMMMMMMMMMMMMMMMMMMMMMMMMMMMd                    dMMMMMMMMMMMMMMMMMMMMMMMMMMMDd.
 *       dDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd´                  `dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDd
 *      `MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd                    dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMD´
 *      .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd,.mMMMMMMMMMMMMMMm..,MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMD.
 *       dDMMMMMMMMMMMMMMMMMMMMMMMMMdm/-´     `-+dMMMd+-´      `ddmMMMMMMMMMMMMMMMMMMMMMMMMMMDd
 *        dDMMMMMMMMMMMMMMMMMMMMMdd-              :m:              -ddMMMMMMMMMMMMMMMMMMMMMMDd
 *         `\dMMMMMMMMMMMMMMMMMMdd                 '                 ddMMMMMMMMMMMMMMMMMMMd/´
 *             `:dDMMMMMMmddMMMDd                                     ddMMMdmdddMMMMddm+:´
 *                        -DDMMM+           .mMm.     .mMm.           +DDMMm-
 *                       .DMMMMM\          .MMMMM´   `MMMMM:          /MMMMMD.
 *                       mMMMMMMM\         :MMMMM:   :MMMMM:         /MMMMMMMm
 *                      :MM+´´++dd.         :MMMM:   :MMMM:         .dd++``+MM.
 *                      .M        `           .ddmDDMddm.           ´        M.
 *                       M-    ++            .MMMMMMMMMMM             ++    -M
 *                       `M.    .D+`          `+ddMMMdm+´          ´+D.    .M´
 *                        `M:     ddm\`                         ´/ddm     :M´
 *                          \M.     +DDMd\_                 _/ddMM+´    .M/
 *                            \M:    `dMMMMMDddmmmmmmmmdddMMMMMMMd´   :M/
 *                              \.Mm   `+ddMMMMMMMMMMMMMMMMMdd+´   mM./
 *                                 `ddm    -ddMMMMMMMMMMdd-    ddm´
 *                                     -ddm                ddm-
 *                                          -ddmddmddmddm-
 *
 *  * /
 */
(self.webpackChunkaloha=self.webpackChunkaloha||[]).push([["vendor"],{"./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{createPopper:function(){return m},detectOverflow:function(){return u.default},popperGenerator:function(){return h}});var i=n(/*! ./dom-utils/getCompositeRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),r=n(/*! ./dom-utils/getLayoutRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=n(/*! ./dom-utils/listScrollParents.js */"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),s=n(/*! ./dom-utils/getOffsetParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=n(/*! ./utils/orderModifiers.js */"./node_modules/@popperjs/core/lib/utils/orderModifiers.js"),l=n(/*! ./utils/debounce.js */"./node_modules/@popperjs/core/lib/utils/debounce.js"),c=n(/*! ./utils/mergeByName.js */"./node_modules/@popperjs/core/lib/utils/mergeByName.js"),u=n(/*! ./utils/detectOverflow.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),d=n(/*! ./dom-utils/instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),p={placement:"bottom",modifiers:[],strategy:"absolute"};function f(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function h(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,u=void 0===n?[]:n,h=t.defaultOptions,m=void 0===h?p:h;return function(e,t,n){void 0===n&&(n=m);var h={placement:"bottom",orderedModifiers:[],options:Object.assign({},p,m),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},g=[],v=!1,b={state:h,setOptions:function(n){var i="function"==typeof n?n(h.options):n;y(),h.options=Object.assign({},m,h.options,i),h.scrollParents={reference:(0,d.isElement)(e)?(0,o.default)(e):e.contextElement?(0,o.default)(e.contextElement):[],popper:(0,o.default)(t)};var r=(0,a.default)((0,c.default)([].concat(u,h.options.modifiers)));return h.orderedModifiers=r.filter((function(e){return e.enabled})),h.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var o=r({state:h,name:t,instance:b,options:i}),s=function(){};g.push(o||s)}})),b.update()},forceUpdate:function(){if(!v){var e=h.elements,t=e.reference,n=e.popper;if(f(t,n)){h.rects={reference:(0,i.default)(t,(0,s.default)(n),"fixed"===h.options.strategy),popper:(0,r.default)(n)},h.reset=!1,h.placement=h.options.placement,h.orderedModifiers.forEach((function(e){return h.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<h.orderedModifiers.length;o++)if(!0!==h.reset){var a=h.orderedModifiers[o],l=a.fn,c=a.options,u=void 0===c?{}:c,d=a.name;"function"==typeof l&&(h=l({state:h,options:u,name:d,instance:b})||h)}else h.reset=!1,o=-1}}},update:(0,l.default)((function(){return new Promise((function(e){b.forceUpdate(),e(h)}))})),destroy:function(){y(),v=!0}};if(!f(e,t))return b;function y(){g.forEach((function(e){return e()})),g=[]}return b.setOptions(n).then((function(e){!v&&n.onFirstUpdate&&n.onFirstUpdate(e)})),b}}var m=h()},"./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&(0,i.isShadowRoot)(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}},"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),r=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js"),o=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=n(/*! ./isLayoutViewport.js */"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var a=e.getBoundingClientRect(),l=1,c=1;t&&(0,i.isHTMLElement)(e)&&(l=e.offsetWidth>0&&(0,r.round)(a.width)/e.offsetWidth||1,c=e.offsetHeight>0&&(0,r.round)(a.height)/e.offsetHeight||1);var u=((0,i.isElement)(e)?(0,o.default)(e):window).visualViewport,d=!(0,s.default)()&&n,p=(a.left+(d&&u?u.offsetLeft:0))/l,f=(a.top+(d&&u?u.offsetTop:0))/c,h=a.width/l,m=a.height/c;return{width:h,height:m,top:f,right:p+h,bottom:f+m,left:p,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return b}});var i=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),r=n(/*! ./getViewportRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),o=n(/*! ./getDocumentRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),s=n(/*! ./listScrollParents.js */"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),a=n(/*! ./getOffsetParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=n(/*! ./getComputedStyle.js */"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),u=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),d=n(/*! ./getBoundingClientRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),p=n(/*! ./getParentNode.js */"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),f=n(/*! ./contains.js */"./node_modules/@popperjs/core/lib/dom-utils/contains.js"),h=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),m=n(/*! ../utils/rectToClientRect.js */"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),g=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js");function v(e,t,n){return t===i.viewport?(0,m.default)((0,r.default)(e,n)):(0,u.isElement)(t)?function(e,t){var n=(0,d.default)(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):(0,m.default)((0,o.default)((0,l.default)(e)))}function b(e,t,n,i){var r="clippingParents"===t?function(e){var t=(0,s.default)((0,p.default)(e)),n=["absolute","fixed"].indexOf((0,c.default)(e).position)>=0&&(0,u.isHTMLElement)(e)?(0,a.default)(e):e;return(0,u.isElement)(n)?t.filter((function(e){return(0,u.isElement)(e)&&(0,f.default)(e,n)&&"body"!==(0,h.default)(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),l=o[0],d=o.reduce((function(t,n){var r=v(e,n,i);return t.top=(0,g.max)(r.top,t.top),t.right=(0,g.min)(r.right,t.right),t.bottom=(0,g.min)(r.bottom,t.bottom),t.left=(0,g.max)(r.left,t.left),t}),v(e,l,i));return d.width=d.right-d.left,d.height=d.bottom-d.top,d.x=d.left,d.y=d.top,d}},"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var i=n(/*! ./getBoundingClientRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=n(/*! ./getNodeScroll.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),o=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=n(/*! ./getWindowScrollBarX.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),l=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=n(/*! ./isScrollParent.js */"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),u=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js");function d(e,t,n){void 0===n&&(n=!1);var d=(0,s.isHTMLElement)(t),p=(0,s.isHTMLElement)(t)&&function(e){var t=e.getBoundingClientRect(),n=(0,u.round)(t.width)/e.offsetWidth||1,i=(0,u.round)(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),f=(0,l.default)(t),h=(0,i.default)(e,p,n),m={scrollLeft:0,scrollTop:0},g={x:0,y:0};return(d||!d&&!n)&&(("body"!==(0,o.default)(t)||(0,c.default)(f))&&(m=(0,r.default)(t)),(0,s.isHTMLElement)(t)?((g=(0,i.default)(t,!0)).x+=t.clientLeft,g.y+=t.clientTop):f&&(g.x=(0,a.default)(f))),{x:h.left+m.scrollLeft-g.x,y:h.top+m.scrollTop-g.y,width:h.width,height:h.height}}},"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){return(0,i.default)(e).getComputedStyle(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e){return(((0,i.isElement)(e)?e.ownerDocument:e.document)||window.document).documentElement}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var i=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),r=n(/*! ./getComputedStyle.js */"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),o=n(/*! ./getWindowScrollBarX.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),s=n(/*! ./getWindowScroll.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),a=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js");function l(e){var t,n=(0,i.default)(e),l=(0,s.default)(e),c=null==(t=e.ownerDocument)?void 0:t.body,u=(0,a.max)(n.scrollWidth,n.clientWidth,c?c.scrollWidth:0,c?c.clientWidth:0),d=(0,a.max)(n.scrollHeight,n.clientHeight,c?c.scrollHeight:0,c?c.clientHeight:0),p=-l.scrollLeft+(0,o.default)(e),f=-l.scrollTop;return"rtl"===(0,r.default)(c||n).direction&&(p+=(0,a.max)(n.clientWidth,c?c.clientWidth:0)-u),{width:u,height:d,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/function(e,t,n){"use strict";function i(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getBoundingClientRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function r(e){var t=(0,i.default)(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}},"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/function(e,t,n){"use strict";function i(e){return e?(e.nodeName||"").toLowerCase():null}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getWindowScroll.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),r=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),o=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),s=n(/*! ./getHTMLElementScroll.js */"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function a(e){return e!==(0,r.default)(e)&&(0,o.isHTMLElement)(e)?(0,s.default)(e):(0,i.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var i=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),o=n(/*! ./getComputedStyle.js */"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),s=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=n(/*! ./isTableElement.js */"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),l=n(/*! ./getParentNode.js */"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),c=n(/*! ../utils/userAgent.js */"./node_modules/@popperjs/core/lib/utils/userAgent.js");function u(e){return(0,s.isHTMLElement)(e)&&"fixed"!==(0,o.default)(e).position?e.offsetParent:null}function d(e){for(var t=(0,i.default)(e),n=u(e);n&&(0,a.default)(n)&&"static"===(0,o.default)(n).position;)n=u(n);return n&&("html"===(0,r.default)(n)||"body"===(0,r.default)(n)&&"static"===(0,o.default)(n).position)?t:n||function(e){var t=/firefox/i.test((0,c.default)());if(/Trident/i.test((0,c.default)())&&(0,s.isHTMLElement)(e)&&"fixed"===(0,o.default)(e).position)return null;var n=(0,l.default)(e);for((0,s.isShadowRoot)(n)&&(n=n.host);(0,s.isHTMLElement)(n)&&["html","body"].indexOf((0,r.default)(n))<0;){var i=(0,o.default)(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}},"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var i=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(e){return"html"===(0,i.default)(e)?e:e.assignedSlot||e.parentNode||((0,o.isShadowRoot)(e)?e.host:null)||(0,r.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getParentNode.js */"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),r=n(/*! ./isScrollParent.js */"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),o=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=n(/*! ./instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function a(e){return["html","body","#document"].indexOf((0,o.default)(e))>=0?e.ownerDocument.body:(0,s.isHTMLElement)(e)&&(0,r.default)(e)?e:a((0,i.default)(e))}},"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=n(/*! ./getWindowScrollBarX.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),s=n(/*! ./isLayoutViewport.js */"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(e,t){var n=(0,i.default)(e),a=(0,r.default)(e),l=n.visualViewport,c=a.clientWidth,u=a.clientHeight,d=0,p=0;if(l){c=l.width,u=l.height;var f=(0,s.default)();(f||!f&&"fixed"===t)&&(d=l.offsetLeft,p=l.offsetTop)}return{width:c,height:u,x:d+(0,o.default)(e),y:p}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/function(e,t,n){"use strict";function i(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){var t=(0,i.default)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var i=n(/*! ./getBoundingClientRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=n(/*! ./getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=n(/*! ./getWindowScroll.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function s(e){return(0,i.default)((0,r.default)(e)).left+(0,o.default)(e).scrollLeft}},"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{isElement:function(){return r},isHTMLElement:function(){return o},isShadowRoot:function(){return s}});var i=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){return e instanceof(0,i.default)(e).Element||e instanceof Element}function o(e){return e instanceof(0,i.default)(e).HTMLElement||e instanceof HTMLElement}function s(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,i.default)(e).ShadowRoot||e instanceof ShadowRoot)}},"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js ***!
  \***********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ../utils/userAgent.js */"./node_modules/@popperjs/core/lib/utils/userAgent.js");function r(){return!/^((?!chrome|android).)*safari/i.test((0,i.default)())}},"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getComputedStyle.js */"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function r(e){var t=(0,i.default)(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}},"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function r(e){return["table","td","th"].indexOf((0,i.default)(e))>=0}},"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getScrollParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),r=n(/*! ./getParentNode.js */"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),o=n(/*! ./getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=n(/*! ./isScrollParent.js */"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function a(e,t){var n;void 0===t&&(t=[]);var l=(0,i.default)(e),c=l===(null==(n=e.ownerDocument)?void 0:n.body),u=(0,o.default)(l),d=c?[u].concat(u.visualViewport||[],(0,s.default)(l)?l:[]):l,p=t.concat(d);return c?p:p.concat(a((0,r.default)(d)))}},"./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{afterMain:function(){return x},afterRead:function(){return y},afterWrite:function(){return E},auto:function(){return a},basePlacements:function(){return l},beforeMain:function(){return _},beforeRead:function(){return v},beforeWrite:function(){return j},bottom:function(){return r},clippingParents:function(){return d},end:function(){return u},left:function(){return s},main:function(){return w},modifierPhases:function(){return A},placements:function(){return g},popper:function(){return f},read:function(){return b},reference:function(){return h},right:function(){return o},start:function(){return c},top:function(){return i},variationPlacements:function(){return m},viewport:function(){return p},write:function(){return T}});var i="top",r="bottom",o="right",s="left",a="auto",l=[i,r,o,s],c="start",u="end",d="clippingParents",p="viewport",f="popper",h="reference",m=l.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+u])}),[]),g=[].concat(l,[a]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+u])}),[]),v="beforeRead",b="read",y="afterRead",_="beforeMain",w="main",x="afterMain",j="beforeWrite",T="write",E="afterWrite",A=[v,b,y,_,w,x,j,T,E]},"./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{afterMain:function(){return i.afterMain},afterRead:function(){return i.afterRead},afterWrite:function(){return i.afterWrite},applyStyles:function(){return r.applyStyles},arrow:function(){return r.arrow},auto:function(){return i.auto},basePlacements:function(){return i.basePlacements},beforeMain:function(){return i.beforeMain},beforeRead:function(){return i.beforeRead},beforeWrite:function(){return i.beforeWrite},bottom:function(){return i.bottom},clippingParents:function(){return i.clippingParents},computeStyles:function(){return r.computeStyles},createPopper:function(){return a.createPopper},createPopperBase:function(){return o.createPopper},createPopperLite:function(){return l.createPopper},detectOverflow:function(){return s.default},end:function(){return i.end},eventListeners:function(){return r.eventListeners},flip:function(){return r.flip},hide:function(){return r.hide},left:function(){return i.left},main:function(){return i.main},modifierPhases:function(){return i.modifierPhases},offset:function(){return r.offset},placements:function(){return i.placements},popper:function(){return i.popper},popperGenerator:function(){return o.popperGenerator},popperOffsets:function(){return r.popperOffsets},preventOverflow:function(){return r.preventOverflow},read:function(){return i.read},reference:function(){return i.reference},right:function(){return i.right},start:function(){return i.start},top:function(){return i.top},variationPlacements:function(){return i.variationPlacements},viewport:function(){return i.viewport},write:function(){return i.write}});var i=n(/*! ./enums.js */"./node_modules/@popperjs/core/lib/enums.js"),r=n(/*! ./modifiers/index.js */"./node_modules/@popperjs/core/lib/modifiers/index.js"),o=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/createPopper.js"),s=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=n(/*! ./popper.js */"./node_modules/@popperjs/core/lib/popper.js"),l=n(/*! ./popper-lite.js */"./node_modules/@popperjs/core/lib/popper-lite.js")},"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../dom-utils/getNodeName.js */"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=n(/*! ../dom-utils/instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");t.default={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},o=t.attributes[e]||{},s=t.elements[e];(0,r.isHTMLElement)(s)&&(0,i.default)(s)&&(Object.assign(s.style,n),Object.keys(o).forEach((function(e){var t=o[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var o=t.elements[e],s=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});(0,r.isHTMLElement)(o)&&(0,i.default)(o)&&(Object.assign(o.style,a),Object.keys(s).forEach((function(e){o.removeAttribute(e)})))}))}},requires:["computeStyles"]}},"./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../utils/getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=n(/*! ../dom-utils/getLayoutRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=n(/*! ../dom-utils/contains.js */"./node_modules/@popperjs/core/lib/dom-utils/contains.js"),s=n(/*! ../dom-utils/getOffsetParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=n(/*! ../utils/getMainAxisFromPlacement.js */"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),l=n(/*! ../utils/within.js */"./node_modules/@popperjs/core/lib/utils/within.js"),c=n(/*! ../utils/mergePaddingObject.js */"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),u=n(/*! ../utils/expandToHashMap.js */"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),d=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js");t.default={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,o=e.name,p=e.options,f=n.elements.arrow,h=n.modifiersData.popperOffsets,m=(0,i.default)(n.placement),g=(0,a.default)(m),v=[d.left,d.right].indexOf(m)>=0?"height":"width";if(f&&h){var b=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.default)("number"!=typeof e?e:(0,u.default)(e,d.basePlacements))}(p.padding,n),y=(0,r.default)(f),_="y"===g?d.top:d.left,w="y"===g?d.bottom:d.right,x=n.rects.reference[v]+n.rects.reference[g]-h[g]-n.rects.popper[v],j=h[g]-n.rects.reference[g],T=(0,s.default)(f),E=T?"y"===g?T.clientHeight||0:T.clientWidth||0:0,A=x/2-j/2,k=b[_],C=E-y[v]-b[w],S=E/2-y[v]/2+A,O=(0,l.within)(k,S,C),D=g;n.modifiersData[o]=((t={})[D]=O,t.centerOffset=O-S,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&(0,o.default)(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{mapToStyles:function(){return p}});var i=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),r=n(/*! ../dom-utils/getOffsetParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),o=n(/*! ../dom-utils/getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=n(/*! ../dom-utils/getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),a=n(/*! ../dom-utils/getComputedStyle.js */"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),l=n(/*! ../utils/getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),c=n(/*! ../utils/getVariation.js */"./node_modules/@popperjs/core/lib/utils/getVariation.js"),u=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js"),d={top:"auto",right:"auto",bottom:"auto",left:"auto"};function p(e){var t,n=e.popper,l=e.popperRect,c=e.placement,p=e.variation,f=e.offsets,h=e.position,m=e.gpuAcceleration,g=e.adaptive,v=e.roundOffsets,b=e.isFixed,y=f.x,_=void 0===y?0:y,w=f.y,x=void 0===w?0:w,j="function"==typeof v?v({x:_,y:x}):{x:_,y:x};_=j.x,x=j.y;var T=f.hasOwnProperty("x"),E=f.hasOwnProperty("y"),A=i.left,k=i.top,C=window;if(g){var S=(0,r.default)(n),O="clientHeight",D="clientWidth";if(S===(0,o.default)(n)&&(S=(0,s.default)(n),"static"!==(0,a.default)(S).position&&"absolute"===h&&(O="scrollHeight",D="scrollWidth")),c===i.top||(c===i.left||c===i.right)&&p===i.end)k=i.bottom,x-=(b&&S===C&&C.visualViewport?C.visualViewport.height:S[O])-l.height,x*=m?1:-1;if(c===i.left||(c===i.top||c===i.bottom)&&p===i.end)A=i.right,_-=(b&&S===C&&C.visualViewport?C.visualViewport.width:S[D])-l.width,_*=m?1:-1}var L,P=Object.assign({position:h},g&&d),N=!0===v?function(e,t){var n=e.x,i=e.y,r=t.devicePixelRatio||1;return{x:(0,u.round)(n*r)/r||0,y:(0,u.round)(i*r)/r||0}}({x:_,y:x},(0,o.default)(n)):{x:_,y:x};return _=N.x,x=N.y,m?Object.assign({},P,((L={})[k]=E?"0":"",L[A]=T?"0":"",L.transform=(C.devicePixelRatio||1)<=1?"translate("+_+"px, "+x+"px)":"translate3d("+_+"px, "+x+"px, 0)",L)):Object.assign({},P,((t={})[k]=E?x+"px":"",t[A]=T?_+"px":"",t.transform="",t))}t.default={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,u=void 0===a||a,d={placement:(0,l.default)(t.placement),variation:(0,c.default)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,p(Object.assign({},d,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,p(Object.assign({},d,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../dom-utils/getWindow.js */"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r={passive:!0};t.default={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,o=e.options,s=o.scroll,a=void 0===s||s,l=o.resize,c=void 0===l||l,u=(0,i.default)(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&d.forEach((function(e){e.addEventListener("scroll",n.update,r)})),c&&u.addEventListener("resize",n.update,r),function(){a&&d.forEach((function(e){e.removeEventListener("scroll",n.update,r)})),c&&u.removeEventListener("resize",n.update,r)}},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../utils/getOppositePlacement.js */"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),r=n(/*! ../utils/getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=n(/*! ../utils/getOppositeVariationPlacement.js */"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),s=n(/*! ../utils/detectOverflow.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=n(/*! ../utils/computeAutoPlacement.js */"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),l=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),c=n(/*! ../utils/getVariation.js */"./node_modules/@popperjs/core/lib/utils/getVariation.js");t.default={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,u=e.name;if(!t.modifiersData[u]._skip){for(var d=n.mainAxis,p=void 0===d||d,f=n.altAxis,h=void 0===f||f,m=n.fallbackPlacements,g=n.padding,v=n.boundary,b=n.rootBoundary,y=n.altBoundary,_=n.flipVariations,w=void 0===_||_,x=n.allowedAutoPlacements,j=t.options.placement,T=(0,r.default)(j),E=m||(T===j||!w?[(0,i.default)(j)]:function(e){if((0,r.default)(e)===l.auto)return[];var t=(0,i.default)(e);return[(0,o.default)(e),t,(0,o.default)(t)]}(j)),A=[j].concat(E).reduce((function(e,n){return e.concat((0,r.default)(n)===l.auto?(0,a.default)(t,{placement:n,boundary:v,rootBoundary:b,padding:g,flipVariations:w,allowedAutoPlacements:x}):n)}),[]),k=t.rects.reference,C=t.rects.popper,S=new Map,O=!0,D=A[0],L=0;L<A.length;L++){var P=A[L],N=(0,r.default)(P),M=(0,c.default)(P)===l.start,I=[l.top,l.bottom].indexOf(N)>=0,$=I?"width":"height",q=(0,s.default)(t,{placement:P,boundary:v,rootBoundary:b,altBoundary:y,padding:g}),H=I?M?l.right:l.left:M?l.bottom:l.top;k[$]>C[$]&&(H=(0,i.default)(H));var R=(0,i.default)(H),F=[];if(p&&F.push(q[N]<=0),h&&F.push(q[H]<=0,q[R]<=0),F.every((function(e){return e}))){D=P,O=!1;break}S.set(P,F)}if(O)for(var W=function(e){var t=A.find((function(t){var n=S.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return D=t,"break"},B=w?3:1;B>0;B--){if("break"===W(B))break}t.placement!==D&&(t.modifiersData[u]._skip=!0,t.placement=D,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),r=n(/*! ../utils/detectOverflow.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js");function o(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function s(e){return[i.top,i.right,i.bottom,i.left].some((function(t){return e[t]>=0}))}t.default={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,a=t.rects.popper,l=t.modifiersData.preventOverflow,c=(0,r.default)(t,{elementContext:"reference"}),u=(0,r.default)(t,{altBoundary:!0}),d=o(c,i),p=o(u,a,l),f=s(d),h=s(p);t.modifiersData[n]={referenceClippingOffsets:d,popperEscapeOffsets:p,isReferenceHidden:f,hasPopperEscaped:h},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":h})}}},"./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{applyStyles:function(){return i.default},arrow:function(){return r.default},computeStyles:function(){return o.default},eventListeners:function(){return s.default},flip:function(){return a.default},hide:function(){return l.default},offset:function(){return c.default},popperOffsets:function(){return u.default},preventOverflow:function(){return d.default}});var i=n(/*! ./applyStyles.js */"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),r=n(/*! ./arrow.js */"./node_modules/@popperjs/core/lib/modifiers/arrow.js"),o=n(/*! ./computeStyles.js */"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),s=n(/*! ./eventListeners.js */"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),a=n(/*! ./flip.js */"./node_modules/@popperjs/core/lib/modifiers/flip.js"),l=n(/*! ./hide.js */"./node_modules/@popperjs/core/lib/modifiers/hide.js"),c=n(/*! ./offset.js */"./node_modules/@popperjs/core/lib/modifiers/offset.js"),u=n(/*! ./popperOffsets.js */"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),d=n(/*! ./preventOverflow.js */"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{distanceAndSkiddingToXY:function(){return o}});var i=n(/*! ../utils/getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js");function o(e,t,n){var o=(0,i.default)(e),s=[r.left,r.top].indexOf(o)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,l=a[0],c=a[1];return l=l||0,c=(c||0)*s,[r.left,r.right].indexOf(o)>=0?{x:c,y:l}:{x:l,y:c}}t.default={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,s=n.offset,a=void 0===s?[0,0]:s,l=r.placements.reduce((function(e,n){return e[n]=o(n,t.rects,a),e}),{}),c=l[t.placement],u=c.x,d=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=d),t.modifiersData[i]=l}}},"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../utils/computeOffsets.js */"./node_modules/@popperjs/core/lib/utils/computeOffsets.js");t.default={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=(0,i.default)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/function(e,t,n){"use strict";n.r(t);var i=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),r=n(/*! ../utils/getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=n(/*! ../utils/getMainAxisFromPlacement.js */"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),s=n(/*! ../utils/getAltAxis.js */"./node_modules/@popperjs/core/lib/utils/getAltAxis.js"),a=n(/*! ../utils/within.js */"./node_modules/@popperjs/core/lib/utils/within.js"),l=n(/*! ../dom-utils/getLayoutRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),c=n(/*! ../dom-utils/getOffsetParent.js */"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),u=n(/*! ../utils/detectOverflow.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),d=n(/*! ../utils/getVariation.js */"./node_modules/@popperjs/core/lib/utils/getVariation.js"),p=n(/*! ../utils/getFreshSideObject.js */"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),f=n(/*! ../utils/math.js */"./node_modules/@popperjs/core/lib/utils/math.js");t.default={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,h=e.name,m=n.mainAxis,g=void 0===m||m,v=n.altAxis,b=void 0!==v&&v,y=n.boundary,_=n.rootBoundary,w=n.altBoundary,x=n.padding,j=n.tether,T=void 0===j||j,E=n.tetherOffset,A=void 0===E?0:E,k=(0,u.default)(t,{boundary:y,rootBoundary:_,padding:x,altBoundary:w}),C=(0,r.default)(t.placement),S=(0,d.default)(t.placement),O=!S,D=(0,o.default)(C),L=(0,s.default)(D),P=t.modifiersData.popperOffsets,N=t.rects.reference,M=t.rects.popper,I="function"==typeof A?A(Object.assign({},t.rects,{placement:t.placement})):A,$="number"==typeof I?{mainAxis:I,altAxis:I}:Object.assign({mainAxis:0,altAxis:0},I),q=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,H={x:0,y:0};if(P){if(g){var R,F="y"===D?i.top:i.left,W="y"===D?i.bottom:i.right,B="y"===D?"height":"width",z=P[D],V=z+k[F],X=z-k[W],U=T?-M[B]/2:0,Y=S===i.start?N[B]:M[B],Q=S===i.start?-M[B]:-N[B],G=t.elements.arrow,K=T&&G?(0,l.default)(G):{width:0,height:0},J=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,p.default)(),Z=J[F],ee=J[W],te=(0,a.within)(0,N[B],K[B]),ne=O?N[B]/2-U-te-Z-$.mainAxis:Y-te-Z-$.mainAxis,ie=O?-N[B]/2+U+te+ee+$.mainAxis:Q+te+ee+$.mainAxis,re=t.elements.arrow&&(0,c.default)(t.elements.arrow),oe=re?"y"===D?re.clientTop||0:re.clientLeft||0:0,se=null!=(R=null==q?void 0:q[D])?R:0,ae=z+ne-se-oe,le=z+ie-se,ce=(0,a.within)(T?(0,f.min)(V,ae):V,z,T?(0,f.max)(X,le):X);P[D]=ce,H[D]=ce-z}if(b){var ue,de="x"===D?i.top:i.left,pe="x"===D?i.bottom:i.right,fe=P[L],he="y"===L?"height":"width",me=fe+k[de],ge=fe-k[pe],ve=-1!==[i.top,i.left].indexOf(C),be=null!=(ue=null==q?void 0:q[L])?ue:0,ye=ve?me:fe-N[he]-M[he]-be+$.altAxis,_e=ve?fe+N[he]+M[he]-be-$.altAxis:ge,we=T&&ve?(0,a.withinMaxClamp)(ye,fe,_e):(0,a.within)(T?ye:me,fe,T?_e:ge);P[L]=we,H[L]=we-fe}t.modifiersData[h]=H}},requiresIfExists:["offset"]}},"./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{createPopper:function(){return u},defaultModifiers:function(){return c},detectOverflow:function(){return r.default},popperGenerator:function(){return i.popperGenerator}});var i=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/createPopper.js"),r=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=n(/*! ./modifiers/eventListeners.js */"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),s=n(/*! ./modifiers/popperOffsets.js */"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=n(/*! ./modifiers/computeStyles.js */"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=n(/*! ./modifiers/applyStyles.js */"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=[o.default,s.default,a.default,l.default],u=(0,i.popperGenerator)({defaultModifiers:c})},"./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{applyStyles:function(){return m.applyStyles},arrow:function(){return m.arrow},computeStyles:function(){return m.computeStyles},createPopper:function(){return v},createPopperLite:function(){return h.createPopper},defaultModifiers:function(){return g},detectOverflow:function(){return r.default},eventListeners:function(){return m.eventListeners},flip:function(){return m.flip},hide:function(){return m.hide},offset:function(){return m.offset},popperGenerator:function(){return i.popperGenerator},popperOffsets:function(){return m.popperOffsets},preventOverflow:function(){return m.preventOverflow}});var i=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/createPopper.js"),r=n(/*! ./createPopper.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=n(/*! ./modifiers/eventListeners.js */"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),s=n(/*! ./modifiers/popperOffsets.js */"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=n(/*! ./modifiers/computeStyles.js */"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=n(/*! ./modifiers/applyStyles.js */"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=n(/*! ./modifiers/offset.js */"./node_modules/@popperjs/core/lib/modifiers/offset.js"),u=n(/*! ./modifiers/flip.js */"./node_modules/@popperjs/core/lib/modifiers/flip.js"),d=n(/*! ./modifiers/preventOverflow.js */"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),p=n(/*! ./modifiers/arrow.js */"./node_modules/@popperjs/core/lib/modifiers/arrow.js"),f=n(/*! ./modifiers/hide.js */"./node_modules/@popperjs/core/lib/modifiers/hide.js"),h=n(/*! ./popper-lite.js */"./node_modules/@popperjs/core/lib/popper-lite.js"),m=n(/*! ./modifiers/index.js */"./node_modules/@popperjs/core/lib/modifiers/index.js"),g=[o.default,s.default,a.default,l.default,c.default,u.default,d.default,p.default,f.default],v=(0,i.popperGenerator)({defaultModifiers:g})},"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getVariation.js */"./node_modules/@popperjs/core/lib/utils/getVariation.js"),r=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),o=n(/*! ./detectOverflow.js */"./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),s=n(/*! ./getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function a(e,t){void 0===t&&(t={});var n=t,a=n.placement,l=n.boundary,c=n.rootBoundary,u=n.padding,d=n.flipVariations,p=n.allowedAutoPlacements,f=void 0===p?r.placements:p,h=(0,i.default)(a),m=h?d?r.variationPlacements:r.variationPlacements.filter((function(e){return(0,i.default)(e)===h})):r.basePlacements,g=m.filter((function(e){return f.indexOf(e)>=0}));0===g.length&&(g=m);var v=g.reduce((function(t,n){return t[n]=(0,o.default)(e,{placement:n,boundary:l,rootBoundary:c,padding:u})[(0,s.default)(n)],t}),{});return Object.keys(v).sort((function(e,t){return v[e]-v[t]}))}},"./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var i=n(/*! ./getBasePlacement.js */"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=n(/*! ./getVariation.js */"./node_modules/@popperjs/core/lib/utils/getVariation.js"),o=n(/*! ./getMainAxisFromPlacement.js */"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),s=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js");function a(e){var t,n=e.reference,a=e.element,l=e.placement,c=l?(0,i.default)(l):null,u=l?(0,r.default)(l):null,d=n.x+n.width/2-a.width/2,p=n.y+n.height/2-a.height/2;switch(c){case s.top:t={x:d,y:n.y-a.height};break;case s.bottom:t={x:d,y:n.y+n.height};break;case s.right:t={x:n.x+n.width,y:p};break;case s.left:t={x:n.x-a.width,y:p};break;default:t={x:n.x,y:n.y}}var f=c?(0,o.default)(c):null;if(null!=f){var h="y"===f?"height":"width";switch(u){case s.start:t[f]=t[f]-(n[h]/2-a[h]/2);break;case s.end:t[f]=t[f]+(n[h]/2-a[h]/2)}}return t}},"./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/function(e,t,n){"use strict";function i(e){var t;return function(){return t||(t=new Promise((function(n){Promise.resolve().then((function(){t=void 0,n(e())}))}))),t}}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var i=n(/*! ../dom-utils/getClippingRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),r=n(/*! ../dom-utils/getDocumentElement.js */"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=n(/*! ../dom-utils/getBoundingClientRect.js */"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=n(/*! ./computeOffsets.js */"./node_modules/@popperjs/core/lib/utils/computeOffsets.js"),a=n(/*! ./rectToClientRect.js */"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),l=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js"),c=n(/*! ../dom-utils/instanceOf.js */"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),u=n(/*! ./mergePaddingObject.js */"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),d=n(/*! ./expandToHashMap.js */"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function p(e,t){void 0===t&&(t={});var n=t,p=n.placement,f=void 0===p?e.placement:p,h=n.strategy,m=void 0===h?e.strategy:h,g=n.boundary,v=void 0===g?l.clippingParents:g,b=n.rootBoundary,y=void 0===b?l.viewport:b,_=n.elementContext,w=void 0===_?l.popper:_,x=n.altBoundary,j=void 0!==x&&x,T=n.padding,E=void 0===T?0:T,A=(0,u.default)("number"!=typeof E?E:(0,d.default)(E,l.basePlacements)),k=w===l.popper?l.reference:l.popper,C=e.rects.popper,S=e.elements[j?k:w],O=(0,i.default)((0,c.isElement)(S)?S:S.contextElement||(0,r.default)(e.elements.popper),v,y,m),D=(0,o.default)(e.elements.reference),L=(0,s.default)({reference:D,element:C,strategy:"absolute",placement:f}),P=(0,a.default)(Object.assign({},C,L)),N=w===l.popper?P:D,M={top:O.top-N.top+A.top,bottom:N.bottom-O.bottom+A.bottom,left:O.left-N.left+A.left,right:N.right-O.right+A.right},I=e.modifiersData.offset;if(w===l.popper&&I){var $=I[f];Object.keys(M).forEach((function(e){var t=[l.right,l.bottom].indexOf(e)>=0?1:-1,n=[l.top,l.bottom].indexOf(e)>=0?"y":"x";M[e]+=$[n]*t}))}return M}},"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/function(e,t,n){"use strict";function i(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/function(e,t,n){"use strict";function i(e){return"x"===e?"y":"x"}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/function(e,t,n){"use strict";function i(e){return e.split("-")[0]}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/function(e,t,n){"use strict";function i(){return{top:0,right:0,bottom:0,left:0}}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/function(e,t,n){"use strict";function i(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i={left:"right",right:"left",bottom:"top",top:"bottom"};function r(e){return e.replace(/left|right|bottom|top/g,(function(e){return i[e]}))}},"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i={start:"end",end:"start"};function r(e){return e.replace(/start|end/g,(function(e){return i[e]}))}},"./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/function(e,t,n){"use strict";function i(e){return e.split("-")[1]}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{max:function(){return i},min:function(){return r},round:function(){return o}});var i=Math.max,r=Math.min,o=Math.round},"./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/function(e,t,n){"use strict";function i(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var i=n(/*! ./getFreshSideObject.js */"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function r(e){return Object.assign({},(0,i.default)(),e)}},"./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return o}});var i=n(/*! ../enums.js */"./node_modules/@popperjs/core/lib/enums.js");function r(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}function o(e){var t=r(e);return i.modifierPhases.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}},"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/function(e,t,n){"use strict";function i(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/userAgent.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/userAgent.js ***!
  \************************************************************/function(e,t,n){"use strict";function i(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}n.r(t),n.d(t,{default:function(){return i}})},"./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{within:function(){return r},withinMaxClamp:function(){return o}});var i=n(/*! ./math.js */"./node_modules/@popperjs/core/lib/utils/math.js");function r(e,t,n){return(0,i.max)(e,(0,i.min)(t,n))}function o(e,t,n){var i=r(e,t,n);return i>n?n:i}},"./node_modules/bootstrap/dist/js/bootstrap.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.esm.js ***!
  \*********************************************************/function(e,t,n){"use strict";n.r(t),n.d(t,{Alert:function(){return J},Button:function(){return ee},Carousel:function(){return Le},Collapse:function(){return Xe},Dropdown:function(){return vt},Modal:function(){return Jt},Offcanvas:function(){return vn},Popover:function(){return Hn},ScrollSpy:function(){return Gn},Tab:function(){return yi},Toast:function(){return Ni},Tooltip:function(){return In}});var i=n(/*! @popperjs/core */"./node_modules/@popperjs/core/lib/index.js"),r=n(/*! @popperjs/core */"./node_modules/@popperjs/core/lib/popper.js");
/*!
  * Bootstrap v5.3.2 (https://getbootstrap.com/)
  * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
const o=new Map,s={set(e,t,n){o.has(e)||o.set(e,new Map);const i=o.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get(e,t){return o.has(e)&&o.get(e).get(t)||null},remove(e,t){if(!o.has(e))return;const n=o.get(e);n.delete(t),0===n.size&&o.delete(e)}},a="transitionend",l=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),c=e=>{e.dispatchEvent(new Event(a))},u=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),d=e=>u(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(l(e)):null,p=e=>{if(!u(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},f=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),h=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?h(e.parentNode):null},m=()=>{},g=e=>{e.offsetHeight},v=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,b=[],y=()=>"rtl"===document.documentElement.dir,_=e=>{var t;t=()=>{const t=v();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(b.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of b)e()})),b.push(t)):t()},w=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,x=(e,t,n=!0)=>{if(!n)return void w(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(a,o),w(e))};t.addEventListener(a,o),setTimeout((()=>{r||c(t)}),i)},j=(e,t,n,i)=>{const r=e.length;let o=e.indexOf(t);return-1===o?!n&&i?e[r-1]:e[0]:(o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))])},T=/[^.]*(?=\..*)\.|.*/,E=/\..*/,A=/::\d+$/,k={};let C=1;const S={mouseenter:"mouseover",mouseleave:"mouseout"},O=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function D(e,t){return t&&`${t}::${C++}`||e.uidEvent||C++}function L(e){const t=D(e);return e.uidEvent=t,k[t]=k[t]||{},k[t]}function P(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function N(e,t,n){const i="string"==typeof t,r=i?n:t||n;let o=q(e);return O.has(o)||(o=e),[i,r,o]}function M(e,t,n,i,r){if("string"!=typeof t||!e)return;let[o,s,a]=N(t,n,i);if(t in S){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};s=e(s)}const l=L(e),c=l[a]||(l[a]={}),u=P(c,s,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const d=D(s,t.replace(T,"")),p=o?function(e,t,n){return function i(r){const o=e.querySelectorAll(t);for(let{target:s}=r;s&&s!==this;s=s.parentNode)for(const a of o)if(a===s)return R(r,{delegateTarget:s}),i.oneOff&&H.off(e,r.type,t,n),n.apply(s,[r])}}(e,n,s):function(e,t){return function n(i){return R(i,{delegateTarget:e}),n.oneOff&&H.off(e,i.type,t),t.apply(e,[i])}}(e,s);p.delegationSelector=o?n:null,p.callable=s,p.oneOff=r,p.uidEvent=d,c[d]=p,e.addEventListener(a,p,o)}function I(e,t,n,i,r){const o=P(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function $(e,t,n,i){const r=t[n]||{};for(const[o,s]of Object.entries(r))o.includes(i)&&I(e,t,n,s.callable,s.delegationSelector)}function q(e){return e=e.replace(E,""),S[e]||e}const H={on(e,t,n,i){M(e,t,n,i,!1)},one(e,t,n,i){M(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,o,s]=N(t,n,i),a=s!==t,l=L(e),c=l[s]||{},u=t.startsWith(".");if(void 0===o){if(u)for(const n of Object.keys(l))$(e,l,n,t.slice(1));for(const[n,i]of Object.entries(c)){const r=n.replace(A,"");a&&!t.includes(r)||I(e,l,s,i.callable,i.delegationSelector)}}else{if(!Object.keys(c).length)return;I(e,l,s,o,r?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=v();let r=null,o=!0,s=!0,a=!1;t!==q(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),o=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),a=r.isDefaultPrevented());const l=R(new Event(t,{bubbles:o,cancelable:!0}),n);return a&&l.preventDefault(),s&&e.dispatchEvent(l),l.defaultPrevented&&r&&r.preventDefault(),l}};function R(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get(){return i}})}return e}function F(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function W(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const B={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${W(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${W(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=F(e.dataset[i])}return t},getDataAttribute(e,t){return F(e.getAttribute(`data-bs-${W(t)}`))}};class z{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=u(t)?B.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...u(t)?B.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[i,r]of Object.entries(t)){const t=e[i],o=u(t)?"element":null==(n=t)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${r}".`)}var n}}class V extends z{constructor(e,t){super(),(e=d(e))&&(this._element=e,this._config=this._getConfig(t),s.set(this._element,this.constructor.DATA_KEY,this))}dispose(){s.remove(this._element,this.constructor.DATA_KEY),H.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){x(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return s.get(d(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.2"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const X=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?l(n.trim()):null}return t},U={find(e,t=document.documentElement){return[].concat(...Element.prototype.querySelectorAll.call(t,e))},findOne(e,t=document.documentElement){return Element.prototype.querySelector.call(t,e)},children(e,t){return[].concat(...e.children).filter((e=>e.matches(t)))},parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!f(e)&&p(e)))},getSelectorFromElement(e){const t=X(e);return t&&U.findOne(t)?t:null},getElementFromSelector(e){const t=X(e);return t?U.findOne(t):null},getMultipleElementsFromSelector(e){const t=X(e);return t?U.find(t):[]}},Y=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;H.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),f(this))return;const r=U.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(r)[t]()}))},Q=".bs.alert",G=`close${Q}`,K=`closed${Q}`;class J extends V{static get NAME(){return"alert"}close(){if(H.trigger(this._element,G).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),H.trigger(this._element,K),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=J.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Y(J,"close"),_(J);const Z='[data-bs-toggle="button"]';class ee extends V{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=ee.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}H.on(document,"click.bs.button.data-api",Z,(e=>{e.preventDefault();const t=e.target.closest(Z);ee.getOrCreateInstance(t).toggle()})),_(ee);const te=".bs.swipe",ne=`touchstart${te}`,ie=`touchmove${te}`,re=`touchend${te}`,oe=`pointerdown${te}`,se=`pointerup${te}`,ae={endCallback:null,leftCallback:null,rightCallback:null},le={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ce extends z{constructor(e,t){super(),this._element=e,e&&ce.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return ae}static get DefaultType(){return le}static get NAME(){return"swipe"}dispose(){H.off(this._element,te)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),w(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&w(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(H.on(this._element,oe,(e=>this._start(e))),H.on(this._element,se,(e=>this._end(e))),this._element.classList.add("pointer-event")):(H.on(this._element,ne,(e=>this._start(e))),H.on(this._element,ie,(e=>this._move(e))),H.on(this._element,re,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ue=".bs.carousel",de=".data-api",pe="next",fe="prev",he="left",me="right",ge=`slide${ue}`,ve=`slid${ue}`,be=`keydown${ue}`,ye=`mouseenter${ue}`,_e=`mouseleave${ue}`,we=`dragstart${ue}`,xe=`load${ue}${de}`,je=`click${ue}${de}`,Te="carousel",Ee="active",Ae=".active",ke=".carousel-item",Ce=Ae+ke,Se={ArrowLeft:me,ArrowRight:he},Oe={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},De={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Le extends V{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=U.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Te&&this.cycle()}static get Default(){return Oe}static get DefaultType(){return De}static get NAME(){return"carousel"}next(){this._slide(pe)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._slide(fe)}pause(){this._isSliding&&c(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?H.one(this._element,ve,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void H.one(this._element,ve,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?pe:fe;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&H.on(this._element,be,(e=>this._keydown(e))),"hover"===this._config.pause&&(H.on(this._element,ye,(()=>this.pause())),H.on(this._element,_e,(()=>this._maybeEnableCycle()))),this._config.touch&&ce.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of U.find(".carousel-item img",this._element))H.on(e,we,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(he)),rightCallback:()=>this._slide(this._directionToOrder(me)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ce(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Se[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=U.findOne(Ae,this._indicatorsElement);t.classList.remove(Ee),t.removeAttribute("aria-current");const n=U.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(Ee),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===pe,r=t||j(this._getItems(),n,i,this._config.wrap);if(r===n)return;const o=this._getItemIndex(r),s=t=>H.trigger(this._element,t,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:o});if(s(ge).defaultPrevented)return;if(!n||!r)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";r.classList.add(c),g(r),n.classList.add(l),r.classList.add(l);this._queueCallback((()=>{r.classList.remove(l,c),r.classList.add(Ee),n.classList.remove(Ee,c,l),this._isSliding=!1,s(ve)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return U.findOne(Ce,this._element)}_getItems(){return U.find(ke,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return y()?e===he?fe:pe:e===he?pe:fe}_orderToDirection(e){return y()?e===fe?he:me:e===fe?me:he}static jQueryInterface(e){return this.each((function(){const t=Le.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}H.on(document,je,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=U.getElementFromSelector(this);if(!t||!t.classList.contains(Te))return;e.preventDefault();const n=Le.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===B.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),H.on(window,xe,(()=>{const e=U.find('[data-bs-ride="carousel"]');for(const t of e)Le.getOrCreateInstance(t)})),_(Le);const Pe=".bs.collapse",Ne=`show${Pe}`,Me=`shown${Pe}`,Ie=`hide${Pe}`,$e=`hidden${Pe}`,qe=`click${Pe}.data-api`,He="show",Re="collapse",Fe="collapsing",We=`:scope .${Re} .${Re}`,Be='[data-bs-toggle="collapse"]',ze={parent:null,toggle:!0},Ve={parent:"(null|element)",toggle:"boolean"};class Xe extends V{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=U.find(Be);for(const e of n){const t=U.getSelectorFromElement(e),n=U.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return ze}static get DefaultType(){return Ve}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Xe.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(H.trigger(this._element,Ne).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Re),this._element.classList.add(Fe),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Re,He),this._element.style[t]="",H.trigger(this._element,Me)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(H.trigger(this._element,Ie).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,g(this._element),this._element.classList.add(Fe),this._element.classList.remove(Re,He);for(const e of this._triggerArray){const t=U.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Re),H.trigger(this._element,$e)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(He)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=d(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Be);for(const t of e){const e=U.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=U.find(We,this._config.parent);return U.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=Xe.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}H.on(document,qe,Be,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of U.getMultipleElementsFromSelector(this))Xe.getOrCreateInstance(e,{toggle:!1}).toggle()})),_(Xe);const Ue="dropdown",Ye=".bs.dropdown",Qe=".data-api",Ge="ArrowUp",Ke="ArrowDown",Je=`hide${Ye}`,Ze=`hidden${Ye}`,et=`show${Ye}`,tt=`shown${Ye}`,nt=`click${Ye}${Qe}`,it=`keydown${Ye}${Qe}`,rt=`keyup${Ye}${Qe}`,ot="show",st='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',at=`${st}.${ot}`,lt=".dropdown-menu",ct=y()?"top-end":"top-start",ut=y()?"top-start":"top-end",dt=y()?"bottom-end":"bottom-start",pt=y()?"bottom-start":"bottom-end",ft=y()?"left-start":"right-start",ht=y()?"right-start":"left-start",mt={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},gt={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class vt extends V{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=U.next(this._element,lt)[0]||U.prev(this._element,lt)[0]||U.findOne(lt,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return mt}static get DefaultType(){return gt}static get NAME(){return Ue}toggle(){return this._isShown()?this.hide():this.show()}show(){if(f(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!H.trigger(this._element,et,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))H.on(e,"mouseover",m);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(ot),this._element.classList.add(ot),H.trigger(this._element,tt,e)}}hide(){if(f(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!H.trigger(this._element,Je,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))H.off(e,"mouseover",m);this._popper&&this._popper.destroy(),this._menu.classList.remove(ot),this._element.classList.remove(ot),this._element.setAttribute("aria-expanded","false"),B.removeDataAttribute(this._menu,"popper"),H.trigger(this._element,Ze,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!u(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ue.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:u(this._config.reference)?e=d(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=r.createPopper(e,this._menu,t)}_isShown(){return this._menu.classList.contains(ot)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return ft;if(e.classList.contains("dropstart"))return ht;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?ut:ct:t?pt:dt}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(B.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...w(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=U.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>p(e)));n.length&&j(n,t,e===Ke,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=vt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=U.find(at);for(const n of t){const t=vt.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),r=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!r||"outside"===t._config.autoClose&&r)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[Ge,Ke].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const r=this.matches(st)?this:U.prev(this,st)[0]||U.next(this,st)[0]||U.findOne(st,e.delegateTarget.parentNode),o=vt.getOrCreateInstance(r);if(i)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),r.focus())}}H.on(document,it,st,vt.dataApiKeydownHandler),H.on(document,it,lt,vt.dataApiKeydownHandler),H.on(document,nt,vt.clearMenus),H.on(document,rt,vt.clearMenus),H.on(document,nt,st,(function(e){e.preventDefault(),vt.getOrCreateInstance(this).toggle()})),_(vt);const bt="backdrop",yt="show",_t=`mousedown.bs.${bt}`,wt={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},xt={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class jt extends z{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return wt}static get DefaultType(){return xt}static get NAME(){return bt}show(e){if(!this._config.isVisible)return void w(e);this._append();const t=this._getElement();this._config.isAnimated&&g(t),t.classList.add(yt),this._emulateAnimation((()=>{w(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(yt),this._emulateAnimation((()=>{this.dispose(),w(e)}))):w(e)}dispose(){this._isAppended&&(H.off(this._element,_t),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=d(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),H.on(e,_t,(()=>{w(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){x(e,this._getElement(),this._config.isAnimated)}}const Tt=".bs.focustrap",Et=`focusin${Tt}`,At=`keydown.tab${Tt}`,kt="backward",Ct={autofocus:!0,trapElement:null},St={autofocus:"boolean",trapElement:"element"};class Ot extends z{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Ct}static get DefaultType(){return St}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),H.off(document,Tt),H.on(document,Et,(e=>this._handleFocusin(e))),H.on(document,At,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,H.off(document,Tt))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=U.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===kt?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?kt:"forward")}}const Dt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Lt=".sticky-top",Pt="padding-right",Nt="margin-right";class Mt{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Pt,(t=>t+e)),this._setElementAttributes(Dt,Pt,(t=>t+e)),this._setElementAttributes(Lt,Nt,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Pt),this._resetElementAttributes(Dt,Pt),this._resetElementAttributes(Lt,Nt)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(r))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&B.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=B.getDataAttribute(e,t);null!==n?(B.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(u(e))t(e);else for(const n of U.find(e,this._element))t(n)}}const It=".bs.modal",$t=`hide${It}`,qt=`hidePrevented${It}`,Ht=`hidden${It}`,Rt=`show${It}`,Ft=`shown${It}`,Wt=`resize${It}`,Bt=`click.dismiss${It}`,zt=`mousedown.dismiss${It}`,Vt=`keydown.dismiss${It}`,Xt=`click${It}.data-api`,Ut="modal-open",Yt="show",Qt="modal-static",Gt={backdrop:!0,focus:!0,keyboard:!0},Kt={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Jt extends V{constructor(e,t){super(e,t),this._dialog=U.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Mt,this._addEventListeners()}static get Default(){return Gt}static get DefaultType(){return Kt}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||this._isTransitioning)return;H.trigger(this._element,Rt,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ut),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;H.trigger(this._element,$t).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Yt),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){H.off(window,It),H.off(this._dialog,It),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new jt({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ot({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=U.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),g(this._element),this._element.classList.add(Yt);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,H.trigger(this._element,Ft,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){H.on(this._element,Vt,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),H.on(window,Wt,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),H.on(this._element,zt,(e=>{H.one(this._element,Bt,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ut),this._resetAdjustments(),this._scrollBar.reset(),H.trigger(this._element,Ht)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(H.trigger(this._element,qt).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Qt)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Qt),this._queueCallback((()=>{this._element.classList.remove(Qt),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=y()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=y()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Jt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}H.on(document,Xt,'[data-bs-toggle="modal"]',(function(e){const t=U.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),H.one(t,Rt,(e=>{e.defaultPrevented||H.one(t,Ht,(()=>{p(this)&&this.focus()}))}));const n=U.findOne(".modal.show");n&&Jt.getInstance(n).hide();Jt.getOrCreateInstance(t).toggle(this)})),Y(Jt),_(Jt);const Zt=".bs.offcanvas",en=".data-api",tn=`load${Zt}${en}`,nn="show",rn="showing",on="hiding",sn=".offcanvas.show",an=`show${Zt}`,ln=`shown${Zt}`,cn=`hide${Zt}`,un=`hidePrevented${Zt}`,dn=`hidden${Zt}`,pn=`resize${Zt}`,fn=`click${Zt}${en}`,hn=`keydown.dismiss${Zt}`,mn={backdrop:!0,keyboard:!0,scroll:!1},gn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class vn extends V{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return mn}static get DefaultType(){return gn}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(H.trigger(this._element,an,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Mt).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(rn);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(nn),this._element.classList.remove(rn),H.trigger(this._element,ln,{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if(H.trigger(this._element,cn).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(on),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(nn,on),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Mt).reset(),H.trigger(this._element,dn)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new jt({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():H.trigger(this._element,un)}:null})}_initializeFocusTrap(){return new Ot({trapElement:this._element})}_addEventListeners(){H.on(this._element,hn,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():H.trigger(this._element,un))}))}static jQueryInterface(e){return this.each((function(){const t=vn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}H.on(document,fn,'[data-bs-toggle="offcanvas"]',(function(e){const t=U.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this))return;H.one(t,dn,(()=>{p(this)&&this.focus()}));const n=U.findOne(sn);n&&n!==t&&vn.getInstance(n).hide();vn.getOrCreateInstance(t).toggle(this)})),H.on(window,tn,(()=>{for(const e of U.find(sn))vn.getOrCreateInstance(e).show()})),H.on(window,pn,(()=>{for(const e of U.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&vn.getOrCreateInstance(e).hide()})),Y(vn),_(vn);const bn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},yn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),_n=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,wn=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!yn.has(n)||Boolean(_n.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))};const xn={allowList:bn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},jn={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Tn={entry:"(string|element|function|null)",selector:"(string|element)"};class En extends z{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return xn}static get DefaultType(){return jn}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},Tn)}_setContent(e,t,n){const i=U.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?u(t)?this._putElementInTemplate(d(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const e of r){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),r=[].concat(t["*"]||[],t[n]||[]);for(const t of i)wn(t,r)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return w(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const An=new Set(["sanitize","allowList","sanitizeFn"]),kn="fade",Cn="show",Sn=".modal",On="hide.bs.modal",Dn="hover",Ln="focus",Pn={AUTO:"auto",TOP:"top",RIGHT:y()?"left":"right",BOTTOM:"bottom",LEFT:y()?"right":"left"},Nn={allowList:bn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Mn={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class In extends V{constructor(e,t){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Nn}static get DefaultType(){return Mn}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),H.off(this._element.closest(Sn),On,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=H.trigger(this._element,this.constructor.eventName("show")),t=(h(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),H.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(Cn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))H.on(e,"mouseover",m);this._queueCallback((()=>{H.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(H.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(Cn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))H.off(e,"mouseover",m);this._activeTrigger.click=!1,this._activeTrigger[Ln]=!1,this._activeTrigger[Dn]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),H.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(kn,Cn),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(kn),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new En({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(kn)}_isShown(){return this.tip&&this.tip.classList.contains(Cn)}_createPopper(e){const t=w(this._config.placement,[this,e,this._element]),n=Pn[t.toUpperCase()];return r.createPopper(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return w(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...w(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)H.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===Dn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===Dn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");H.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Ln:Dn]=!0,t._enter()})),H.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Ln:Dn]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},H.on(this._element.closest(Sn),On,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=B.getDataAttributes(this._element);for(const e of Object.keys(t))An.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:d(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=In.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}_(In);const $n={...In.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},qn={...In.DefaultType,content:"(null|string|element|function)"};class Hn extends In{static get Default(){return $n}static get DefaultType(){return qn}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=Hn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}_(Hn);const Rn=".bs.scrollspy",Fn=`activate${Rn}`,Wn=`click${Rn}`,Bn=`load${Rn}.data-api`,zn="active",Vn="[href]",Xn=".nav-link",Un=`${Xn}, .nav-item > ${Xn}, .list-group-item`,Yn={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Qn={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Gn extends V{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Yn}static get DefaultType(){return Qn}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=d(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(H.off(this._config.target,Wn),H.on(this._config.target,Wn,Vn,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&e){if(n(o),!i)return}else r||e||n(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=U.find(Vn,this._config.target);for(const t of e){if(!t.hash||f(t))continue;const e=U.findOne(decodeURI(t.hash),this._element);p(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(zn),this._activateParents(e),H.trigger(this._element,Fn,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))U.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(zn);else for(const t of U.parents(e,".nav, .list-group"))for(const e of U.prev(t,Un))e.classList.add(zn)}_clearActiveClass(e){e.classList.remove(zn);const t=U.find(`${Vn}.${zn}`,e);for(const e of t)e.classList.remove(zn)}static jQueryInterface(e){return this.each((function(){const t=Gn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}H.on(window,Bn,(()=>{for(const e of U.find('[data-bs-spy="scroll"]'))Gn.getOrCreateInstance(e)})),_(Gn);const Kn=".bs.tab",Jn=`hide${Kn}`,Zn=`hidden${Kn}`,ei=`show${Kn}`,ti=`shown${Kn}`,ni=`click${Kn}`,ii=`keydown${Kn}`,ri=`load${Kn}`,oi="ArrowLeft",si="ArrowRight",ai="ArrowUp",li="ArrowDown",ci="Home",ui="End",di="active",pi="fade",fi="show",hi=".dropdown-toggle",mi=`:not(${hi})`,gi='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',vi=`${`.nav-link${mi}, .list-group-item${mi}, [role="tab"]${mi}`}, ${gi}`,bi=`.${di}[data-bs-toggle="tab"], .${di}[data-bs-toggle="pill"], .${di}[data-bs-toggle="list"]`;class yi extends V{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),H.on(this._element,ii,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?H.trigger(t,Jn,{relatedTarget:e}):null;H.trigger(e,ei,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(di),this._activate(U.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),H.trigger(e,ti,{relatedTarget:t})):e.classList.add(fi)}),e,e.classList.contains(pi))}_deactivate(e,t){if(!e)return;e.classList.remove(di),e.blur(),this._deactivate(U.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),H.trigger(e,Zn,{relatedTarget:t})):e.classList.remove(fi)}),e,e.classList.contains(pi))}_keydown(e){if(![oi,si,ai,li,ci,ui].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!f(e)));let n;if([ci,ui].includes(e.key))n=t[e.key===ci?0:t.length-1];else{const i=[si,li].includes(e.key);n=j(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),yi.getOrCreateInstance(n).show())}_getChildren(){return U.find(vi,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=U.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const r=U.findOne(e,n);r&&r.classList.toggle(i,t)};i(hi,di),i(".dropdown-menu",fi),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(di)}_getInnerElement(e){return e.matches(vi)?e:U.findOne(vi,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=yi.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}H.on(document,ni,gi,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this)||yi.getOrCreateInstance(this).show()})),H.on(window,ri,(()=>{for(const e of U.find(bi))yi.getOrCreateInstance(e)})),_(yi);const _i=".bs.toast",wi=`mouseover${_i}`,xi=`mouseout${_i}`,ji=`focusin${_i}`,Ti=`focusout${_i}`,Ei=`hide${_i}`,Ai=`hidden${_i}`,ki=`show${_i}`,Ci=`shown${_i}`,Si="hide",Oi="show",Di="showing",Li={animation:"boolean",autohide:"boolean",delay:"number"},Pi={animation:!0,autohide:!0,delay:5e3};class Ni extends V{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Pi}static get DefaultType(){return Li}static get NAME(){return"toast"}show(){if(H.trigger(this._element,ki).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Si),g(this._element),this._element.classList.add(Oi,Di),this._queueCallback((()=>{this._element.classList.remove(Di),H.trigger(this._element,Ci),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(H.trigger(this._element,Ei).defaultPrevented)return;this._element.classList.add(Di),this._queueCallback((()=>{this._element.classList.add(Si),this._element.classList.remove(Di,Oi),H.trigger(this._element,Ai)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Oi),super.dispose()}isShown(){return this._element.classList.contains(Oi)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){H.on(this._element,wi,(e=>this._onInteraction(e,!0))),H.on(this._element,xi,(e=>this._onInteraction(e,!1))),H.on(this._element,ji,(e=>this._onInteraction(e,!0))),H.on(this._element,Ti,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Ni.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Y(Ni),_(Ni)},"./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/function(e,t){var n;
/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var o=[],s=Object.getPrototypeOf,a=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,u=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,m=h.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},b=function(e){return null!=e&&e===e.window},y=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||y).createElement("script");if(o.text=e,t)for(i in _)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var j="3.7.1",T=/HTML$/i,E=function(e,t){return new E.fn.init(e,t)};function A(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}E.fn=E.prototype={jquery:j,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[t],o=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,s[t]=E.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},E.extend({expando:"jQuery"+(j+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=s(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&h.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(A(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},text:function(e){var t,n="",i=0,r=e.nodeType;if(!r)for(;t=e[i++];)n+=E.text(t);return 1===r||11===r?e.textContent:9===r?e.documentElement.textContent:3===r||4===r?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(A(Object(e))?E.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!T.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(A(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return l(s)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=o.pop,S=o.sort,O=o.splice,D="[\\x20\\t\\r\\n\\f]",L=new RegExp("^"+D+"+|((?:^|[^\\\\])(?:\\\\.)*)"+D+"+$","g");E.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var P=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function N(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}E.escapeSelector=function(e){return(e+"").replace(P,N)};var M=y,I=c;!function(){var e,t,n,r,s,l,c,d,p,h,m=I,v=E.expando,b=0,y=0,_=ee(),w=ee(),x=ee(),j=ee(),T=function(e,t){return e===t&&(s=!0),0},A="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="(?:\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",N="\\["+D+"*("+P+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+D+"*\\]",$=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",q=new RegExp(D+"+","g"),H=new RegExp("^"+D+"*,"+D+"*"),R=new RegExp("^"+D+"*([>+~]|"+D+")"+D+"*"),F=new RegExp(D+"|>"),W=new RegExp($),B=new RegExp("^"+P+"$"),z={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+D+"*(even|odd|(([+-]|)(\\d*)n|)"+D+"*(?:([+-]|)"+D+"*(\\d+)|))"+D+"*\\)|)","i"),bool:new RegExp("^(?:"+A+")$","i"),needsContext:new RegExp("^"+D+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+D+"*((?:-\\d)?\\d*)"+D+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,U=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Y=/[+~]/,Q=new RegExp("\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\([^\\r\\n\\f])","g"),G=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},K=function(){le()},J=pe((function(e){return!0===e.disabled&&k(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{m.apply(o=a.call(M.childNodes),M.childNodes),o[M.childNodes.length].nodeType}catch(e){m={apply:function(e,t){I.apply(e,a.call(t))},call:function(e){I.apply(e,a.call(arguments,1))}}}function Z(e,t,n,i){var r,o,s,a,c,u,f,h=t&&t.ownerDocument,b=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return n;if(!i&&(le(t),t=t||l,d)){if(11!==b&&(c=U.exec(e)))if(r=c[1]){if(9===b){if(!(s=t.getElementById(r)))return n;if(s.id===r)return m.call(n,s),n}else if(h&&(s=h.getElementById(r))&&Z.contains(t,s)&&s.id===r)return m.call(n,s),n}else{if(c[2])return m.apply(n,t.getElementsByTagName(e)),n;if((r=c[3])&&t.getElementsByClassName)return m.apply(n,t.getElementsByClassName(r)),n}if(!(j[e+" "]||p&&p.test(e))){if(f=e,h=t,1===b&&(F.test(e)||R.test(e))){for((h=Y.test(e)&&ae(t.parentNode)||t)==t&&g.scope||((a=t.getAttribute("id"))?a=E.escapeSelector(a):t.setAttribute("id",a=v)),o=(u=ue(e)).length;o--;)u[o]=(a?"#"+a:":scope")+" "+de(u[o]);f=u.join(",")}try{return m.apply(n,h.querySelectorAll(f)),n}catch(t){j(e,!0)}finally{a===v&&t.removeAttribute("id")}}}return be(e.replace(L,"$1"),t,n,i)}function ee(){var e=[];return function n(i,r){return e.push(i+" ")>t.cacheLength&&delete n[e.shift()],n[i+" "]=r}}function te(e){return e[v]=!0,e}function ne(e){var t=l.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ie(e){return function(t){return k(t,"input")&&t.type===e}}function re(e){return function(t){return(k(t,"input")||k(t,"button"))&&t.type===e}}function oe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&J(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function se(e){return te((function(t){return t=+t,te((function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))}))}))}function ae(e){return e&&void 0!==e.getElementsByTagName&&e}function le(e){var n,i=e?e.ownerDocument||e:M;return i!=l&&9===i.nodeType&&i.documentElement?(c=(l=i).documentElement,d=!E.isXMLDoc(l),h=c.matches||c.webkitMatchesSelector||c.msMatchesSelector,c.msMatchesSelector&&M!=l&&(n=l.defaultView)&&n.top!==n&&n.addEventListener("unload",K),g.getById=ne((function(e){return c.appendChild(e).id=E.expando,!l.getElementsByName||!l.getElementsByName(E.expando).length})),g.disconnectedMatch=ne((function(e){return h.call(e,"*")})),g.scope=ne((function(){return l.querySelectorAll(":scope")})),g.cssHas=ne((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),g.getById?(t.filter.ID=function(e){var t=e.replace(Q,G);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(Q,G);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&d){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&d)return t.getElementsByClassName(e)},p=[],ne((function(e){var t;c.appendChild(e).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||p.push("\\["+D+"*(?:value|"+A+")"),e.querySelectorAll("[id~="+v+"-]").length||p.push("~="),e.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll(":checked").length||p.push(":checked"),(t=l.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),c.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(t=l.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+D+"*name"+D+"*="+D+"*(?:''|\"\")")})),g.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),T=function(e,t){if(e===t)return s=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!g.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument==M&&Z.contains(M,e)?-1:t===l||t.ownerDocument==M&&Z.contains(M,t)?1:r?u.call(r,e)-u.call(r,t):0:4&n?-1:1)},l):l}for(e in Z.matches=function(e,t){return Z(e,null,null,t)},Z.matchesSelector=function(e,t){if(le(e),d&&!j[t+" "]&&(!p||!p.test(t)))try{var n=h.call(e,t);if(n||g.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){j(t,!0)}return Z(t,l,null,[e]).length>0},Z.contains=function(e,t){return(e.ownerDocument||e)!=l&&le(e),E.contains(e,t)},Z.attr=function(e,n){(e.ownerDocument||e)!=l&&le(e);var i=t.attrHandle[n.toLowerCase()],r=i&&f.call(t.attrHandle,n.toLowerCase())?i(e,n,!d):void 0;return void 0!==r?r:e.getAttribute(n)},Z.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},E.uniqueSort=function(e){var t,n=[],i=0,o=0;if(s=!g.sortStable,r=!g.sortStable&&a.call(e,0),S.call(e,T),s){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)O.call(e,n[i],1)}return r=null,e},E.fn.uniqueSort=function(){return this.pushStack(E.uniqueSort(a.apply(this)))},t=E.expr={cacheLength:50,createPseudo:te,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Q,G),e[3]=(e[3]||e[4]||e[5]||"").replace(Q,G),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||Z.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&Z.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=ue(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Q,G).toLowerCase();return"*"===e?function(){return!0}:function(e){return k(e,t)}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+D+")"+e+"("+D+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=Z.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h=o!==s?"nextSibling":"previousSibling",m=t.parentNode,g=a&&t.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(o){for(;h;){for(d=t;d=d[h];)if(a?k(d,g):1===d.nodeType)return!1;f=h="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(_=(p=(c=(u=m[v]||(m[v]={}))[e]||[])[0]===b&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[h]||(_=p=0)||f.pop();)if(1===d.nodeType&&++_&&d===t){u[e]=[b,p,_];break}}else if(y&&(_=p=(c=(u=t[v]||(t[v]={}))[e]||[])[0]===b&&c[1]),!1===_)for(;(d=++p&&d&&d[h]||(_=p=0)||f.pop())&&(!(a?k(d,g):1===d.nodeType)||!++_||(y&&((u=d[v]||(d[v]={}))[e]=[b,_]),d!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,n){var i,r=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Z.error("unsupported pseudo: "+e);return r[v]?r(n):r.length>1?(i=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var i,o=r(e,n),s=o.length;s--;)e[i=u.call(e,o[s])]=!(t[i]=o[s])})):function(e){return r(e,0,i)}):r}},pseudos:{not:te((function(e){var t=[],n=[],i=ve(e.replace(L,"$1"));return i[v]?te((function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Z(e,t).length>0}})),contains:te((function(e){return e=e.replace(Q,G),function(t){return(t.textContent||E.text(t)).indexOf(e)>-1}})),lang:te((function(e){return B.test(e||"")||Z.error("unsupported lang: "+e),e=e.replace(Q,G).toLowerCase(),function(t){var n;do{if(n=d?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===c},focus:function(e){return e===function(){try{return l.activeElement}catch(e){}}()&&l.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:oe(!1),disabled:oe(!0),checked:function(e){return k(e,"input")&&!!e.checked||k(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){return k(e,"input")&&"button"===e.type||k(e,"button")},text:function(e){var t;return k(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:se((function(){return[0]})),last:se((function(e,t){return[t-1]})),eq:se((function(e,t,n){return[n<0?n+t:n]})),even:se((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:se((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:se((function(e,t,n){var i;for(i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:se((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=ie(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=re(e);function ce(){}function ue(e,n){var i,r,o,s,a,l,c,u=w[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=t.preFilter;a;){for(s in i&&!(r=H.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=R.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(L," ")}),a=a.slice(i.length)),t.filter)!(r=z[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?Z.error(e):w(e,l).slice(0)}function de(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function pe(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=y++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var c,u,d=[b,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=t[v]||(t[v]={}),r&&k(t,r))t=t[i]||t;else{if((c=u[o])&&c[0]===b&&c[1]===a)return d[2]=c[2];if(u[o]=d,d[2]=e(t,n,l))return!0}return!1}}function fe(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function he(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function me(e,t,n,i,r,o){return i&&!i[v]&&(i=me(i)),r&&!r[v]&&(r=me(r,o)),te((function(o,s,a,l){var c,d,p,f,h=[],g=[],v=s.length,b=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)Z(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!o&&t?b:he(b,h,e,a,l);if(n?n(y,f=r||(o?e:v||i)?[]:s,a,l):f=y,i)for(c=he(f,g),i(c,[],a,l),d=c.length;d--;)(p=c[d])&&(f[g[d]]=!(y[g[d]]=p));if(o){if(r||e){if(r){for(c=[],d=f.length;d--;)(p=f[d])&&c.push(y[d]=p);r(null,f=[],c,l)}for(d=f.length;d--;)(p=f[d])&&(c=r?u.call(o,p):h[d])>-1&&(o[c]=!(s[c]=p))}}else f=he(f===s?f.splice(v,f.length):f),r?r(null,s,f,l):m.apply(s,f)}))}function ge(e){for(var i,r,o,s=e.length,a=t.relative[e[0].type],l=a||t.relative[" "],c=a?1:0,d=pe((function(e){return e===i}),l,!0),p=pe((function(e){return u.call(i,e)>-1}),l,!0),f=[function(e,t,r){var o=!a&&(r||t!=n)||((i=t).nodeType?d(e,t,r):p(e,t,r));return i=null,o}];c<s;c++)if(r=t.relative[e[c].type])f=[pe(fe(f),r)];else{if((r=t.filter[e[c].type].apply(null,e[c].matches))[v]){for(o=++c;o<s&&!t.relative[e[o].type];o++);return me(c>1&&fe(f),c>1&&de(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(L,"$1"),r,c<o&&ge(e.slice(c,o)),o<s&&ge(e=e.slice(o)),o<s&&de(e))}f.push(r)}return fe(f)}function ve(e,i){var r,o=[],s=[],a=x[e+" "];if(!a){for(i||(i=ue(e)),r=i.length;r--;)(a=ge(i[r]))[v]?o.push(a):s.push(a);a=x(e,function(e,i){var r=i.length>0,o=e.length>0,s=function(s,a,c,u,p){var f,h,g,v=0,y="0",_=s&&[],w=[],x=n,j=s||o&&t.find.TAG("*",p),T=b+=null==x?1:Math.random()||.1,A=j.length;for(p&&(n=a==l||a||p);y!==A&&null!=(f=j[y]);y++){if(o&&f){for(h=0,a||f.ownerDocument==l||(le(f),c=!d);g=e[h++];)if(g(f,a||l,c)){m.call(u,f);break}p&&(b=T)}r&&((f=!g&&f)&&v--,s&&_.push(f))}if(v+=y,r&&y!==v){for(h=0;g=i[h++];)g(_,w,a,c);if(s){if(v>0)for(;y--;)_[y]||w[y]||(w[y]=C.call(u));w=he(w)}m.apply(u,w),p&&!s&&w.length>0&&v+i.length>1&&E.uniqueSort(u)}return p&&(b=T,n=x),_};return r?te(s):s}(s,o)),a.selector=e}return a}function be(e,n,i,r){var o,s,a,l,c,u="function"==typeof e&&e,p=!r&&ue(e=u.selector||e);if(i=i||[],1===p.length){if((s=p[0]=p[0].slice(0)).length>2&&"ID"===(a=s[0]).type&&9===n.nodeType&&d&&t.relative[s[1].type]){if(!(n=(t.find.ID(a.matches[0].replace(Q,G),n)||[])[0]))return i;u&&(n=n.parentNode),e=e.slice(s.shift().value.length)}for(o=z.needsContext.test(e)?0:s.length;o--&&(a=s[o],!t.relative[l=a.type]);)if((c=t.find[l])&&(r=c(a.matches[0].replace(Q,G),Y.test(s[0].type)&&ae(n.parentNode)||n))){if(s.splice(o,1),!(e=r.length&&de(s)))return m.apply(i,r),i;break}}return(u||ve(e,p))(r,n,!d,i,!n||Y.test(e)&&ae(n.parentNode)||n),i}ce.prototype=t.filters=t.pseudos,t.setFilters=new ce,g.sortStable=v.split("").sort(T).join("")===v,le(),g.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(l.createElement("fieldset"))})),E.find=Z,E.expr[":"]=E.expr.pseudos,E.unique=E.uniqueSort,Z.compile=ve,Z.select=be,Z.setDocument=le,Z.tokenize=ue,Z.escape=E.escapeSelector,Z.getText=E.text,Z.isXML=E.isXMLDoc,Z.selectors=E.expr,Z.support=E.support,Z.uniqueSort=E.uniqueSort}();var $=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i},q=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},H=E.expr.match.needsContext,R=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function F(e,t,n){return v(t)?E.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?E.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?E.grep(e,(function(e){return u.call(t,e)>-1!==n})):E.filter(t,e,n)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,(function(e){return 1===e.nodeType})))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter((function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return i>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(F(this,e||[],!1))},not:function(e){return this.pushStack(F(this,e||[],!0))},is:function(e){return!!F(this,"string"==typeof e&&H.test(e)?E(e):e||[],!1).length}});var W,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||W,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:y,!0)),R.test(i[1])&&E.isPlainObject(t))for(i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=y.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,W=E(y);var z=/^(?:parents|prev(?:Until|All))/,V={children:!0,contents:!0,next:!0,prev:!0};function X(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&E(e);if(!H.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(E(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return $(e,"parentNode")},parentsUntil:function(e,t,n){return $(e,"parentNode",n)},next:function(e){return X(e,"nextSibling")},prev:function(e){return X(e,"previousSibling")},nextAll:function(e){return $(e,"nextSibling")},prevAll:function(e){return $(e,"previousSibling")},nextUntil:function(e,t,n){return $(e,"nextSibling",n)},prevUntil:function(e,t,n){return $(e,"previousSibling",n)},siblings:function(e){return q((e.parentNode||{}).firstChild,e)},children:function(e){return q(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},(function(e,t){E.fn[e]=function(n,i){var r=E.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(V[e]||E.uniqueSort(r),z.test(e)&&r.reverse()),this.pushStack(r)}}));var U=/[^\x20\t\r\n\f]+/g;function Y(e){return e}function Q(e){throw e}function G(e,t,n,i){var r;try{e&&v(r=e.promise)?r.call(e).done(t).fail(n):e&&v(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(U)||[],(function(e,n){t[n]=!0})),t}(e):E.extend({},e);var t,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){E.each(n,(function(n,i){v(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==x(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,(function(e,t){for(var n;(n=E.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?E.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return E.Deferred((function(n){E.each(t,(function(t,i){var r=v(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var o=0;function s(e,t,n,r){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(e<o)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?r?c.call(i,s(o,t,Y,r),s(o,t,Q,r)):(o++,c.call(i,s(o,t,Y,r),s(o,t,Q,r),s(o,t,Y,t.notifyWith))):(n!==Y&&(a=void 0,l=[i]),(r||t.resolveWith)(a,l))}},u=r?c:function(){try{c()}catch(i){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(i,u.error),e+1>=o&&(n!==Q&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?u():(E.Deferred.getErrorHook?u.error=E.Deferred.getErrorHook():E.Deferred.getStackHook&&(u.error=E.Deferred.getStackHook()),i.setTimeout(u))}}return E.Deferred((function(i){t[0][3].add(s(0,i,v(r)?r:Y,i.notifyWith)),t[1][3].add(s(0,i,v(e)?e:Y)),t[2][3].add(s(0,i,v(n)?n:Q))})).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},o={};return E.each(t,(function(e,i){var s=i[2],a=i[5];r[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=s.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=a.call(arguments),o=E.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?a.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(G(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||v(r[n]&&r[n].then)))return o.then();for(;n--;)G(r[n],s(n),o.reject);return o.promise()}});var K=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&K.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){i.setTimeout((function(){throw e}))};var J=E.Deferred();function Z(){y.removeEventListener("DOMContentLoaded",Z),i.removeEventListener("load",Z),E.ready()}E.fn.ready=function(e){return J.then(e).catch((function(e){E.readyException(e)})),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||J.resolveWith(y,[E]))}}),E.ready.then=J.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(E.ready):(y.addEventListener("DOMContentLoaded",Z),i.addEventListener("load",Z));var ee=function(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===x(n))for(a in r=!0,n)ee(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,v(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(E(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o},te=/^-ms-/,ne=/-([a-z])/g;function ie(e,t){return t.toUpperCase()}function re(e){return e.replace(te,"ms-").replace(ne,ie)}var oe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function se(){this.expando=E.expando+se.uid++}se.uid=1,se.prototype={cache:function(e){var t=e[this.expando];return t||(t={},oe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[re(t)]=n;else for(i in t)r[re(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][re(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(re):(t=re(t))in i?[t]:t.match(U)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||E.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var ae=new se,le=new se,ce=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ue=/[A-Z]/g;function de(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ue,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ce.test(e)?JSON.parse(e):e)}(n)}catch(e){}le.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return le.hasData(e)||ae.hasData(e)},data:function(e,t,n){return le.access(e,t,n)},removeData:function(e,t){le.remove(e,t)},_data:function(e,t,n){return ae.access(e,t,n)},_removeData:function(e,t){ae.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=le.get(o),1===o.nodeType&&!ae.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=re(i.slice(5)),de(o,i,r[i]));ae.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){le.set(this,e)})):ee(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=le.get(o,e))||void 0!==(n=de(o,e))?n:void 0;this.each((function(){le.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){le.remove(this,e)}))}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=ae.get(e,t),n&&(!i||Array.isArray(n)?i=ae.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),o=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){E.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ae.get(e,n)||ae.access(e,n,{empty:E.Callbacks("once memory").add((function(){ae.remove(e,[t+"queue",n])}))})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each((function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){E.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=E.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=ae.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var pe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,fe=new RegExp("^(?:([+-])=|)("+pe+")([a-z%]*)$","i"),he=["Top","Right","Bottom","Left"],me=y.documentElement,ge=function(e){return E.contains(e.ownerDocument,e)},ve={composed:!0};me.getRootNode&&(ge=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(ve)===e.ownerDocument});var be=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ge(e)&&"none"===E.css(e,"display")};function ye(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=a(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&fe.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)E.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var _e={};function we(e){var t,n=e.ownerDocument,i=e.nodeName,r=_e[i];return r||(t=n.body.appendChild(n.createElement(i)),r=E.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),_e[i]=r,r)}function xe(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=ae.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&be(i)&&(r[o]=we(i))):"none"!==n&&(r[o]="none",ae.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}E.fn.extend({show:function(){return xe(this,!0)},hide:function(){return xe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){be(this)?E(this).show():E(this).hide()}))}});var je,Te,Ee=/^(?:checkbox|radio)$/i,Ae=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ke=/^$|^module$|\/(?:java|ecma)script/i;je=y.createDocumentFragment().appendChild(y.createElement("div")),(Te=y.createElement("input")).setAttribute("type","radio"),Te.setAttribute("checked","checked"),Te.setAttribute("name","t"),je.appendChild(Te),g.checkClone=je.cloneNode(!0).cloneNode(!0).lastChild.checked,je.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!je.cloneNode(!0).lastChild.defaultValue,je.innerHTML="<option></option>",g.option=!!je.lastChild;var Ce={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Se(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?E.merge([e],n):n}function Oe(e,t){for(var n=0,i=e.length;n<i;n++)ae.set(e[n],"globalEval",!t||ae.get(t[n],"globalEval"))}Ce.tbody=Ce.tfoot=Ce.colgroup=Ce.caption=Ce.thead,Ce.th=Ce.td,g.option||(Ce.optgroup=Ce.option=[1,"<select multiple='multiple'>","</select>"]);var De=/<|&#?\w+;/;function Le(e,t,n,i,r){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===x(o))E.merge(p,o.nodeType?[o]:o);else if(De.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(Ae.exec(o)||["",""])[1].toLowerCase(),l=Ce[a]||Ce._default,s.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;E.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(i&&E.inArray(o,i)>-1)r&&r.push(o);else if(c=ge(o),s=Se(d.appendChild(o),"script"),c&&Oe(s),n)for(u=0;o=s[u++];)ke.test(o.type||"")&&n.push(o);return d}var Pe=/^([^.]*)(?:\.(.+)|)/;function Ne(){return!0}function Me(){return!1}function Ie(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ie(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Me;else if(!r)return e;return 1===o&&(s=r,r=function(e){return E().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=E.guid++)),e.each((function(){E.event.add(this,t,r,i,n)}))}function $e(e,t,n){n?(ae.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var n,i=ae.get(this,t);if(1&e.isTrigger&&this[t]){if(i)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),ae.set(this,t,i),this[t](),n=ae.get(this,t),ae.set(this,t,!1),i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else i&&(ae.set(this,t,E.event.trigger(i[0],i.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Ne)}})):void 0===ae.get(e,t)&&E.event.add(e,t,Ne)}E.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,c,u,d,p,f,h,m,g=ae.get(e);if(oe(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(me,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(U)||[""]).length;c--;)f=m=(a=Pe.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=E.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=E.event.special[f]||{},u=E.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:h.join(".")},o),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),E.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,d,p,f,h,m,g=ae.hasData(e)&&ae.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(U)||[""]).length;c--;)if(f=m=(a=Pe.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=E.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||E.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)E.event.remove(e,f+t[c],n,i,!0);E.isEmptyObject(l)&&ae.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=new Array(arguments.length),l=E.event.fix(e),c=(ae.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=E.event.handlers.call(this,l,c),t=0;(r=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Ee.test(t.type)&&t.click&&k(t,"input")&&$e(t,"click",!0),!1},trigger:function(e){var t=this||e;return Ee.test(t.type)&&t.click&&k(t,"input")&&$e(t,"click"),!0},_default:function(e){var t=e.target;return Ee.test(t.type)&&t.click&&k(t,"input")&&ae.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ne:Me,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Me,isPropagationStopped:Me,isImmediatePropagationStopped:Me,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ne,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ne,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ne,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(y.documentMode){var n=ae.get(this,"handle"),i=E.event.fix(e);i.type="focusin"===e.type?"focus":"blur",i.isSimulated=!0,n(e),i.target===i.currentTarget&&n(i)}else E.event.simulate(t,e.target,E.event.fix(e))}E.event.special[e]={setup:function(){var i;if($e(this,e,!0),!y.documentMode)return!1;(i=ae.get(this,t))||this.addEventListener(t,n),ae.set(this,t,(i||0)+1)},trigger:function(){return $e(this,e),!0},teardown:function(){var e;if(!y.documentMode)return!1;(e=ae.get(this,t)-1)?ae.set(this,t,e):(this.removeEventListener(t,n),ae.remove(this,t))},_default:function(t){return ae.get(t.target,e)},delegateType:t},E.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=y.documentMode?this:i,o=ae.get(r,t);o||(y.documentMode?this.addEventListener(t,n):i.addEventListener(e,n,!0)),ae.set(r,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=y.documentMode?this:i,o=ae.get(r,t)-1;o?ae.set(r,t,o):(y.documentMode?this.removeEventListener(t,n):i.removeEventListener(e,n,!0),ae.remove(r,t))}}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),E.fn.extend({on:function(e,t,n,i){return Ie(this,e,t,n,i)},one:function(e,t,n,i){return Ie(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Me),this.each((function(){E.event.remove(this,e,n,t)}))}});var qe=/<script|<style|<link/i,He=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Fe(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function We(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ze(e,t){var n,i,r,o,s,a;if(1===t.nodeType){if(ae.hasData(e)&&(a=ae.get(e).events))for(r in ae.remove(t,"handle events"),a)for(n=0,i=a[r].length;n<i;n++)E.event.add(t,r,a[r][n]);le.hasData(e)&&(o=le.access(e),s=E.extend({},o),le.set(t,s))}}function Ve(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ee.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Xe(e,t,n,i){t=l(t);var r,o,s,a,c,u,d=0,p=e.length,f=p-1,h=t[0],m=v(h);if(m||p>1&&"string"==typeof h&&!g.checkClone&&He.test(h))return e.each((function(r){var o=e.eq(r);m&&(t[0]=h.call(this,r,o.html())),Xe(o,t,n,i)}));if(p&&(o=(r=Le(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=E.map(Se(r,"script"),We)).length;d<p;d++)c=r,d!==f&&(c=E.clone(c,!0,!0),a&&E.merge(s,Se(c,"script"))),n.call(e[d],c,d);if(a)for(u=s[s.length-1].ownerDocument,E.map(s,Be),d=0;d<a;d++)c=s[d],ke.test(c.type||"")&&!ae.access(c,"globalEval")&&E.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&!c.noModule&&E._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Re,""),c,u))}return e}function Ue(e,t,n){for(var i,r=t?E.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(Se(i)),i.parentNode&&(n&&ge(i)&&Oe(Se(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),l=ge(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=Se(a),i=0,r=(o=Se(e)).length;i<r;i++)Ve(o[i],s[i]);if(t)if(n)for(o=o||Se(e),s=s||Se(a),i=0,r=o.length;i<r;i++)ze(o[i],s[i]);else ze(e,a);return(s=Se(a,"script")).length>0&&Oe(s,!l&&Se(e,"script")),a},cleanData:function(e){for(var t,n,i,r=E.event.special,o=0;void 0!==(n=e[o]);o++)if(oe(n)){if(t=n[ae.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[ae.expando]=void 0}n[le.expando]&&(n[le.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Ue(this,e,!0)},remove:function(e){return Ue(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Xe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Fe(this,e).appendChild(e)}))},prepend:function(){return Xe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Fe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(Se(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return E.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!Ce[(Ae.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(Se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Xe(this,arguments,(function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(Se(this)),n&&n.replaceChild(t,this))}),e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){E.fn[e]=function(e){for(var n,i=[],r=E(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),E(r[s])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Ye=new RegExp("^("+pe+")(?!px)[a-z%]+$","i"),Qe=/^--/,Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Ke=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Je=new RegExp(he.join("|"),"i");function Ze(e,t,n){var i,r,o,s,a=Qe.test(t),l=e.style;return(n=n||Ge(e))&&(s=n.getPropertyValue(t)||n[t],a&&s&&(s=s.replace(L,"$1")||void 0),""!==s||ge(e)||(s=E.style(e,t)),!g.pixelBoxStyles()&&Ye.test(s)&&Je.test(t)&&(i=l.width,r=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=s,s=n.width,l.width=i,l.minWidth=r,l.maxWidth=o)),void 0!==s?s+"":s}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",me.appendChild(c).appendChild(u);var e=i.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),r=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),me.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,o,s,a,l,c=y.createElement("div"),u=y.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=y.createElement("table"),t=y.createElement("tr"),n=y.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",me.appendChild(e).appendChild(t).appendChild(n),r=i.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,me.removeChild(e)),a}}))}();var tt=["Webkit","Moz","ms"],nt=y.createElement("div").style,it={};function rt(e){var t=E.cssProps[e]||it[e];return t||(e in nt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=fe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ct(e,t,n,i,r,o){var s="width"===t?1:0,a=0,l=0,c=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=E.css(e,n+he[s],!0,r)),i?("content"===n&&(l-=E.css(e,"padding"+he[s],!0,r)),"margin"!==n&&(l-=E.css(e,"border"+he[s]+"Width",!0,r))):(l+=E.css(e,"padding"+he[s],!0,r),"padding"!==n?l+=E.css(e,"border"+he[s]+"Width",!0,r):a+=E.css(e,"border"+he[s]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l+c}function ut(e,t,n){var i=Ge(e),r=(!g.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),o=r,s=Ze(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&k(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===E.css(e,"boxSizing",!1,i),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ct(e,t,n||(r?"border":"content"),o,i,s)+"px"}function dt(e,t,n,i,r){return new dt.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=re(t),l=Qe.test(t),c=e.style;if(l||(t=rt(a)),s=E.cssHooks[t]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=fe.exec(n))&&r[1]&&(n=ye(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=re(t);return Qe.test(t)||(t=rt(a)),(s=E.cssHooks[t]||E.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ze(e,t,i)),"normal"===r&&t in at&&(r=at[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],(function(e,t){E.cssHooks[t]={get:function(e,n,i){if(n)return!ot.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,t,i):Ke(e,st,(function(){return ut(e,t,i)}))},set:function(e,n,i){var r,o=Ge(e),s=!g.scrollboxSize()&&"absolute"===o.position,a=(s||i)&&"border-box"===E.css(e,"boxSizing",!1,o),l=i?ct(e,t,i,a,o):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-ct(e,t,"border",!1,o)-.5)),l&&(r=fe.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),lt(0,n,l)}}})),E.cssHooks.marginLeft=et(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Ke(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(e,t){E.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+he[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(E.cssHooks[e+t].set=lt)})),E.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=Ge(e),r=t.length;s<r;s++)o[t[s]]=E.css(e,t[s],!1,i);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)}),e,t,arguments.length>1)}}),E.Tween=dt,dt.prototype={constructor:dt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,n=dt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):dt.propHooks._default.set(this),this}},dt.prototype.init.prototype=dt.prototype,dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},dt.propHooks.scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=dt.prototype.init,E.fx.step={};var pt,ft,ht=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;function gt(){ft&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(gt):i.setTimeout(gt,E.fx.interval),E.fx.tick())}function vt(){return i.setTimeout((function(){pt=void 0})),pt=Date.now()}function bt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=he[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function yt(e,t,n){for(var i,r=(_t.tweeners[t]||[]).concat(_t.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function _t(e,t,n){var i,r,o=0,s=_t.prefilters.length,a=E.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=pt||vt(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||vt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=E.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=re(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=E.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);o<s;o++)if(i=_t.prefilters[o].call(c,e,u,c.opts))return v(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,yt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(_t,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ye(n.elem,e,fe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(U);for(var n,i=0,r=e.length;i<r;i++)n=e[i],_t.tweeners[n]=_t.tweeners[n]||[],_t.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&be(e),g=ae.get(e,"fxshow");for(i in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[i],ht.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}f[i]=g&&g[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=ae.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(xe([e],!0),c=e.style.display||c,u=E.css(e,"display"),xe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=ae.access(e,"fxshow",{display:c}),o&&(g.hidden=!m),m&&xe([e],!0),p.done((function(){for(i in m||xe([e]),ae.remove(e,"fxshow"),f)E.style(e,i,f[i])}))),l=yt(m?g[i]:0,i,p),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?_t.prefilters.unshift(e):_t.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(be).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=E.isEmptyObject(e),o=E.speed(t,n,i),s=function(){var t=_t(this,E.extend({},e),o);(r||ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=E.timers,s=ae.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&mt.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||E.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=ae.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=E.timers,s=i?i.length:0;for(n.finish=!0,E.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(e,t){var n=E.fn[t];E.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(bt(t,!0),e,i,r)}})),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){E.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(pt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),pt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ft||(ft=!0,gt())},E.fx.stop=function(){ft=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(r)}}))},function(){var e=y.createElement("input"),t=y.createElement("select").appendChild(y.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=y.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var wt,xt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return ee(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){E.removeAttr(this,e)}))}}),E.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(U);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=xt[t]||E.find.attr;xt[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=xt[s],xt[s]=r,r=null!=n(e,t,i)?s:null,xt[s]=o),r}}));var jt=/^(?:input|select|textarea|button)$/i,Tt=/^(?:a|area)$/i;function Et(e){return(e.match(U)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(U)||[]}E.fn.extend({prop:function(e,t){return ee(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[E.propFix[e]||e]}))}}),E.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):jt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(e){var t,n,i,r,o,s;return v(e)?this.each((function(t){E(this).addClass(e.call(this,t,At(this)))})):(t=kt(e)).length?this.each((function(){if(i=At(this),n=1===this.nodeType&&" "+Et(i)+" "){for(o=0;o<t.length;o++)r=t[o],n.indexOf(" "+r+" ")<0&&(n+=r+" ");s=Et(n),i!==s&&this.setAttribute("class",s)}})):this},removeClass:function(e){var t,n,i,r,o,s;return v(e)?this.each((function(t){E(this).removeClass(e.call(this,t,At(this)))})):arguments.length?(t=kt(e)).length?this.each((function(){if(i=At(this),n=1===this.nodeType&&" "+Et(i)+" "){for(o=0;o<t.length;o++)for(r=t[o];n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");s=Et(n),i!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,i,r,o,s=typeof e,a="string"===s||Array.isArray(e);return v(e)?this.each((function(n){E(this).toggleClass(e.call(this,n,At(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=kt(e),this.each((function(){if(a)for(o=E(this),r=0;r<n.length;r++)i=n[r],o.hasClass(i)?o.removeClass(i):o.addClass(i);else void 0!==e&&"boolean"!==s||((i=At(this))&&ae.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||!1===e?"":ae.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Et(At(n))+" ").indexOf(t)>-1)return!0;return!1}});var Ct=/\r/g;E.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=v(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,E(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,(function(e){return null==e?"":e+""}))),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Ct,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:Et(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=E.makeArray(t),s=r.length;s--;)((i=r[s]).selected=E.inArray(E.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},g.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var St=i.location,Ot={guid:Date.now()},Dt=/\?/;E.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||E.error("Invalid XML: "+(n?E.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Lt=/^(?:focusinfocus|focusoutblur)$/,Pt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var o,s,a,l,c,u,d,p,h=[n||y],m=f.call(e,"type")?e.type:e,g=f.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!Lt.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[E.expando]?e:new E.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),d=E.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(n,t))){if(!r&&!d.noBubble&&!b(n)){for(l=d.delegateType||m,Lt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||y)&&h.push(a.defaultView||a.parentWindow||i)}for(o=0;(s=h[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?l:d.bindType||m,(u=(ae.get(s,"events")||Object.create(null))[e.type]&&ae.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&oe(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!oe(n)||c&&v(n[m])&&!b(n)&&((a=n[c])&&(n[c]=null),E.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,Pt),n[m](),e.isPropagationStopped()&&p.removeEventListener(m,Pt),E.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each((function(){E.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}});var Nt=/\[\]$/,Mt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,$t=/^(?:input|select|textarea|keygen)/i;function qt(e,t,n,i){var r;if(Array.isArray(t))E.each(t,(function(t,r){n||Nt.test(e)?i(e,r):qt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==x(t))i(e,t);else for(r in t)qt(e+"["+r+"]",t[r],n,i)}E.param=function(e,t){var n,i=[],r=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,(function(){r(this.name,this.value)}));else for(n in e)qt(n,e[n],t,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&$t.test(this.nodeName)&&!It.test(e)&&(this.checked||!Ee.test(e))})).map((function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}})):{name:t.name,value:n.replace(Mt,"\r\n")}})).get()}});var Ht=/%20/g,Rt=/#.*$/,Ft=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Bt=/^(?:GET|HEAD)$/,zt=/^\/\//,Vt={},Xt={},Ut="*/".concat("*"),Yt=y.createElement("a");function Qt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(U)||[];if(v(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Gt(e,t,n,i){var r={},o=e===Xt;function s(a){var l;return r[a]=!0,E.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Kt(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&E.extend(!0,e,i),e}Yt.href=St.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ut,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Kt(Kt(e,E.ajaxSettings),t):Kt(E.ajaxSettings,e)},ajaxPrefilter:Qt(Vt),ajaxTransport:Qt(Xt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,o,s,a,l,c,u,d,p,f=E.ajaxSetup({},t),h=f.context||f,m=f.context&&(h.nodeType||h.jquery)?E(h):E.event,g=E.Deferred(),v=E.Callbacks("once memory"),b=f.statusCode||{},_={},w={},x="canceled",j={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Wt.exec(o);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)j.always(e[j.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||x;return n&&n.abort(t),T(0,t),this}};if(g.promise(j),f.url=((e||f.url||St.href)+"").replace(zt,St.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(U)||[""],null==f.crossDomain){l=y.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Yt.protocol+"//"+Yt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=E.param(f.data,f.traditional)),Gt(Vt,f,t,j),c)return j;for(d in(u=E.event&&f.global)&&0==E.active++&&E.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Bt.test(f.type),r=f.url.replace(Rt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ht,"+")):(p=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Dt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Ft,"$1"),p=(Dt.test(r)?"&":"?")+"_="+Ot.guid+++p),f.url=r+p),f.ifModified&&(E.lastModified[r]&&j.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&j.setRequestHeader("If-None-Match",E.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&j.setRequestHeader("Content-Type",f.contentType),j.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ut+"; q=0.01":""):f.accepts["*"]),f.headers)j.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,j,f)||c))return j.abort();if(x="abort",v.add(f.complete),j.done(f.success),j.fail(f.error),n=Gt(Xt,f,t,j)){if(j.readyState=1,u&&m.trigger("ajaxSend",[j,f]),c)return j;f.async&&f.timeout>0&&(a=i.setTimeout((function(){j.abort("timeout")}),f.timeout));try{c=!1,n.send(_,T)}catch(e){if(c)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,s,l){var d,p,y,_,w,x=t;c||(c=!0,a&&i.clearTimeout(a),n=void 0,o=l||"",j.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(_=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,j,s)),!d&&E.inArray("script",f.dataTypes)>-1&&E.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),_=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,_,j,d),d?(f.ifModified&&((w=j.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=w),(w=j.getResponseHeader("etag"))&&(E.etag[r]=w)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=_.state,p=_.data,d=!(y=_.error))):(y=x,!e&&x||(x="error",e<0&&(e=0))),j.status=e,j.statusText=(t||x)+"",d?g.resolveWith(h,[p,x,j]):g.rejectWith(h,[j,x,y]),j.statusCode(b),b=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[j,f,d?p:y]),v.fireWith(h,[j,x]),u&&(m.trigger("ajaxComplete",[j,f]),--E.active||E.event.trigger("ajaxStop")))}return j},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],(function(e,t){E[t]=function(e,n,i,r){return v(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:r,data:n,success:i},E.isPlainObject(e)&&e))}})),E.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){E(this).wrapInner(e.call(this,t))})):this.each((function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){E(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},Zt=E.ajaxSettings.xhr();g.cors=!!Zt&&"withCredentials"in Zt,g.ajax=Zt=!!Zt,E.ajaxTransport((function(e){var t,n;if(g.cors||Zt&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Jt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),E.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),E.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),y.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||E.expando+"_"+Ot.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",(function(e,t,n){var r,o,s,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+r):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||E.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=i[r],i[r]=function(){s=arguments},n.always((function(){void 0===o?E(i).removeProp(r):i[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,tn.push(r)),s&&v(o)&&o(s[0]),s=o=void 0})),"script"})),g.createHTMLDocument=((en=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,t.head.appendChild(i)):t=y),o=!n&&[],(r=R.exec(e))?[t.createElement(r[1])]:(r=Le([e],t,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=Et(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},E.expr.pseudos.animated=function(e){return E.grep(E.timers,(function(t){return e===t.elem})).length},E.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=E.css(e,"position"),u=E(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=E.css(e,"top"),l=E.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(s=(i=u.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),v(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):u.css(d)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){E.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),r.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-E.css(i,"marginTop",!0),left:t.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||me}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;E.fn[e]=function(i){return ee(this,(function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),E.each(["top","left"],(function(e,t){E.cssHooks[t]=et(g.pixelPosition,(function(e,n){if(n)return n=Ze(e,t),Ye.test(n)?E(e).position()[t]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){E.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return ee(this,(function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?E.css(t,n,a):E.style(t,n,r,a)}),t,s?r:void 0,s)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){E.fn[t]=function(e){return this.on(t,e)}})),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var rn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return i=a.call(arguments,2),r=function(){return e.apply(t||this,i.concat(a.call(arguments)))},r.guid=e.guid=e.guid||E.guid++,r},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=k,E.isFunction=v,E.isWindow=b,E.camelCase=re,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(rn,"$1")},void 0===(n=function(){return E}.apply(t,[]))||(e.exports=n);var on=i.jQuery,sn=i.$;return E.noConflict=function(e){return i.$===E&&(i.$=sn),e&&i.jQuery===E&&(i.jQuery=on),E},void 0===r&&(i.jQuery=i.$=E),E}))},"./node_modules/particles.js/particles.js":
/*!************************************************!*\
  !*** ./node_modules/particles.js/particles.js ***!
  \************************************************/function(){var e=function(e,i){var r=document.querySelector("#"+e+" > .particles-js-canvas-el");this.pJS={canvas:{el:r,w:r.offsetWidth,h:r.offsetHeight},particles:{number:{value:400,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle",stroke:{width:0,color:"#ff0000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100}},opacity:{value:1,random:!1,anim:{enable:!1,speed:2,opacity_min:0,sync:!1}},size:{value:20,random:!1,anim:{enable:!1,speed:20,size_min:0,sync:!1}},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:2,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"grab"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}},mouse:{}},retina_detect:!1,fn:{interact:{},modes:{},vendors:{}},tmp:{}};var o=this.pJS;i&&Object.deepExtend(o,i),o.tmp.obj={size_value:o.particles.size.value,size_anim_speed:o.particles.size.anim.speed,move_speed:o.particles.move.speed,line_linked_distance:o.particles.line_linked.distance,line_linked_width:o.particles.line_linked.width,mode_grab_distance:o.interactivity.modes.grab.distance,mode_bubble_distance:o.interactivity.modes.bubble.distance,mode_bubble_size:o.interactivity.modes.bubble.size,mode_repulse_distance:o.interactivity.modes.repulse.distance},o.fn.retinaInit=function(){o.retina_detect&&window.devicePixelRatio>1?(o.canvas.pxratio=window.devicePixelRatio,o.tmp.retina=!0):(o.canvas.pxratio=1,o.tmp.retina=!1),o.canvas.w=o.canvas.el.offsetWidth*o.canvas.pxratio,o.canvas.h=o.canvas.el.offsetHeight*o.canvas.pxratio,o.particles.size.value=o.tmp.obj.size_value*o.canvas.pxratio,o.particles.size.anim.speed=o.tmp.obj.size_anim_speed*o.canvas.pxratio,o.particles.move.speed=o.tmp.obj.move_speed*o.canvas.pxratio,o.particles.line_linked.distance=o.tmp.obj.line_linked_distance*o.canvas.pxratio,o.interactivity.modes.grab.distance=o.tmp.obj.mode_grab_distance*o.canvas.pxratio,o.interactivity.modes.bubble.distance=o.tmp.obj.mode_bubble_distance*o.canvas.pxratio,o.particles.line_linked.width=o.tmp.obj.line_linked_width*o.canvas.pxratio,o.interactivity.modes.bubble.size=o.tmp.obj.mode_bubble_size*o.canvas.pxratio,o.interactivity.modes.repulse.distance=o.tmp.obj.mode_repulse_distance*o.canvas.pxratio},o.fn.canvasInit=function(){o.canvas.ctx=o.canvas.el.getContext("2d")},o.fn.canvasSize=function(){o.canvas.el.width=o.canvas.w,o.canvas.el.height=o.canvas.h,o&&o.interactivity.events.resize&&window.addEventListener("resize",(function(){o.canvas.w=o.canvas.el.offsetWidth,o.canvas.h=o.canvas.el.offsetHeight,o.tmp.retina&&(o.canvas.w*=o.canvas.pxratio,o.canvas.h*=o.canvas.pxratio),o.canvas.el.width=o.canvas.w,o.canvas.el.height=o.canvas.h,o.particles.move.enable||(o.fn.particlesEmpty(),o.fn.particlesCreate(),o.fn.particlesDraw(),o.fn.vendors.densityAutoParticles()),o.fn.vendors.densityAutoParticles()}))},o.fn.canvasPaint=function(){o.canvas.ctx.fillRect(0,0,o.canvas.w,o.canvas.h)},o.fn.canvasClear=function(){o.canvas.ctx.clearRect(0,0,o.canvas.w,o.canvas.h)},o.fn.particle=function(e,n,i){if(this.radius=(o.particles.size.random?Math.random():1)*o.particles.size.value,o.particles.size.anim.enable&&(this.size_status=!1,this.vs=o.particles.size.anim.speed/100,o.particles.size.anim.sync||(this.vs=this.vs*Math.random())),this.x=i?i.x:Math.random()*o.canvas.w,this.y=i?i.y:Math.random()*o.canvas.h,this.x>o.canvas.w-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>o.canvas.h-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),o.particles.move.bounce&&o.fn.vendors.checkOverlap(this,i),this.color={},"object"==typeof e.value)if(e.value instanceof Array){var r=e.value[Math.floor(Math.random()*o.particles.color.value.length)];this.color.rgb=t(r)}else null!=e.value.r&&null!=e.value.g&&null!=e.value.b&&(this.color.rgb={r:e.value.r,g:e.value.g,b:e.value.b}),null!=e.value.h&&null!=e.value.s&&null!=e.value.l&&(this.color.hsl={h:e.value.h,s:e.value.s,l:e.value.l});else"random"==e.value?this.color.rgb={r:Math.floor(256*Math.random())+0,g:Math.floor(256*Math.random())+0,b:Math.floor(256*Math.random())+0}:"string"==typeof e.value&&(this.color=e,this.color.rgb=t(this.color.value));this.opacity=(o.particles.opacity.random?Math.random():1)*o.particles.opacity.value,o.particles.opacity.anim.enable&&(this.opacity_status=!1,this.vo=o.particles.opacity.anim.speed/100,o.particles.opacity.anim.sync||(this.vo=this.vo*Math.random()));var s={};switch(o.particles.move.direction){case"top":s={x:0,y:-1};break;case"top-right":s={x:.5,y:-.5};break;case"right":s={x:1,y:-0};break;case"bottom-right":s={x:.5,y:.5};break;case"bottom":s={x:0,y:1};break;case"bottom-left":s={x:-.5,y:1};break;case"left":s={x:-1,y:0};break;case"top-left":s={x:-.5,y:-.5};break;default:s={x:0,y:0}}o.particles.move.straight?(this.vx=s.x,this.vy=s.y,o.particles.move.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=s.x+Math.random()-.5,this.vy=s.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy;var a=o.particles.shape.type;if("object"==typeof a){if(a instanceof Array){var l=a[Math.floor(Math.random()*a.length)];this.shape=l}}else this.shape=a;if("image"==this.shape){var c=o.particles.shape;this.img={src:c.image.src,ratio:c.image.width/c.image.height},this.img.ratio||(this.img.ratio=1),"svg"==o.tmp.img_type&&null!=o.tmp.source_svg&&(o.fn.vendors.createSvgImg(this),o.tmp.pushing&&(this.img.loaded=!1))}},o.fn.particle.prototype.draw=function(){var e=this;if(null!=e.radius_bubble)var t=e.radius_bubble;else t=e.radius;if(null!=e.opacity_bubble)var n=e.opacity_bubble;else n=e.opacity;if(e.color.rgb)var i="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+n+")";else i="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+n+")";switch(o.canvas.ctx.fillStyle=i,o.canvas.ctx.beginPath(),e.shape){case"circle":o.canvas.ctx.arc(e.x,e.y,t,0,2*Math.PI,!1);break;case"edge":o.canvas.ctx.rect(e.x-t,e.y-t,2*t,2*t);break;case"triangle":o.fn.vendors.drawShape(o.canvas.ctx,e.x-t,e.y+t/1.66,2*t,3,2);break;case"polygon":o.fn.vendors.drawShape(o.canvas.ctx,e.x-t/(o.particles.shape.polygon.nb_sides/3.5),e.y-t/.76,2.66*t/(o.particles.shape.polygon.nb_sides/3),o.particles.shape.polygon.nb_sides,1);break;case"star":o.fn.vendors.drawShape(o.canvas.ctx,e.x-2*t/(o.particles.shape.polygon.nb_sides/4),e.y-t/1.52,2*t*2.66/(o.particles.shape.polygon.nb_sides/3),o.particles.shape.polygon.nb_sides,2);break;case"image":if("svg"==o.tmp.img_type)var r=e.img.obj;else r=o.tmp.img_obj;r&&o.canvas.ctx.drawImage(r,e.x-t,e.y-t,2*t,2*t/e.img.ratio)}o.canvas.ctx.closePath(),o.particles.shape.stroke.width>0&&(o.canvas.ctx.strokeStyle=o.particles.shape.stroke.color,o.canvas.ctx.lineWidth=o.particles.shape.stroke.width,o.canvas.ctx.stroke()),o.canvas.ctx.fill()},o.fn.particlesCreate=function(){for(var e=0;e<o.particles.number.value;e++)o.particles.array.push(new o.fn.particle(o.particles.color,o.particles.opacity.value))},o.fn.particlesUpdate=function(){for(var e=0;e<o.particles.array.length;e++){var t=o.particles.array[e];if(o.particles.move.enable){var i=o.particles.move.speed/2;t.x+=t.vx*i,t.y+=t.vy*i}if(o.particles.opacity.anim.enable&&(1==t.opacity_status?(t.opacity>=o.particles.opacity.value&&(t.opacity_status=!1),t.opacity+=t.vo):(t.opacity<=o.particles.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacity-=t.vo),t.opacity<0&&(t.opacity=0)),o.particles.size.anim.enable&&(1==t.size_status?(t.radius>=o.particles.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=o.particles.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),"bounce"==o.particles.move.out_mode)var r={x_left:t.radius,x_right:o.canvas.w,y_top:t.radius,y_bottom:o.canvas.h};else r={x_left:-t.radius,x_right:o.canvas.w+t.radius,y_top:-t.radius,y_bottom:o.canvas.h+t.radius};if(t.x-t.radius>o.canvas.w?(t.x=r.x_left,t.y=Math.random()*o.canvas.h):t.x+t.radius<0&&(t.x=r.x_right,t.y=Math.random()*o.canvas.h),t.y-t.radius>o.canvas.h?(t.y=r.y_top,t.x=Math.random()*o.canvas.w):t.y+t.radius<0&&(t.y=r.y_bottom,t.x=Math.random()*o.canvas.w),"bounce"===o.particles.move.out_mode)(t.x+t.radius>o.canvas.w||t.x-t.radius<0)&&(t.vx=-t.vx),(t.y+t.radius>o.canvas.h||t.y-t.radius<0)&&(t.vy=-t.vy);if(n("grab",o.interactivity.events.onhover.mode)&&o.fn.modes.grabParticle(t),(n("bubble",o.interactivity.events.onhover.mode)||n("bubble",o.interactivity.events.onclick.mode))&&o.fn.modes.bubbleParticle(t),(n("repulse",o.interactivity.events.onhover.mode)||n("repulse",o.interactivity.events.onclick.mode))&&o.fn.modes.repulseParticle(t),o.particles.line_linked.enable||o.particles.move.attract.enable)for(var s=e+1;s<o.particles.array.length;s++){var a=o.particles.array[s];o.particles.line_linked.enable&&o.fn.interact.linkParticles(t,a),o.particles.move.attract.enable&&o.fn.interact.attractParticles(t,a),o.particles.move.bounce&&o.fn.interact.bounceParticles(t,a)}}},o.fn.particlesDraw=function(){o.canvas.ctx.clearRect(0,0,o.canvas.w,o.canvas.h),o.fn.particlesUpdate();for(var e=0;e<o.particles.array.length;e++){o.particles.array[e].draw()}},o.fn.particlesEmpty=function(){o.particles.array=[]},o.fn.particlesRefresh=function(){cancelRequestAnimFrame(o.fn.checkAnimFrame),cancelRequestAnimFrame(o.fn.drawAnimFrame),o.tmp.source_svg=void 0,o.tmp.img_obj=void 0,o.tmp.count_svg=0,o.fn.particlesEmpty(),o.fn.canvasClear(),o.fn.vendors.start()},o.fn.interact.linkParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);if(r<=o.particles.line_linked.distance){var s=o.particles.line_linked.opacity-r/(1/o.particles.line_linked.opacity)/o.particles.line_linked.distance;if(s>0){var a=o.particles.line_linked.color_rgb_line;o.canvas.ctx.strokeStyle="rgba("+a.r+","+a.g+","+a.b+","+s+")",o.canvas.ctx.lineWidth=o.particles.line_linked.width,o.canvas.ctx.beginPath(),o.canvas.ctx.moveTo(e.x,e.y),o.canvas.ctx.lineTo(t.x,t.y),o.canvas.ctx.stroke(),o.canvas.ctx.closePath()}}},o.fn.interact.attractParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y;if(Math.sqrt(n*n+i*i)<=o.particles.line_linked.distance){var r=n/(1e3*o.particles.move.attract.rotateX),s=i/(1e3*o.particles.move.attract.rotateY);e.vx-=r,e.vy-=s,t.vx+=r,t.vy+=s}},o.fn.interact.bounceParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y;Math.sqrt(n*n+i*i)<=e.radius+t.radius&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)},o.fn.modes.pushParticles=function(e,t){o.tmp.pushing=!0;for(var n=0;n<e;n++)o.particles.array.push(new o.fn.particle(o.particles.color,o.particles.opacity.value,{x:t?t.pos_x:Math.random()*o.canvas.w,y:t?t.pos_y:Math.random()*o.canvas.h})),n==e-1&&(o.particles.move.enable||o.fn.particlesDraw(),o.tmp.pushing=!1)},o.fn.modes.removeParticles=function(e){o.particles.array.splice(0,e),o.particles.move.enable||o.fn.particlesDraw()},o.fn.modes.bubbleParticle=function(e){if(o.interactivity.events.onhover.enable&&n("bubble",o.interactivity.events.onhover.mode)){var t=e.x-o.interactivity.mouse.pos_x,i=e.y-o.interactivity.mouse.pos_y,r=1-(u=Math.sqrt(t*t+i*i))/o.interactivity.modes.bubble.distance;function s(){e.opacity_bubble=e.opacity,e.radius_bubble=e.radius}if(u<=o.interactivity.modes.bubble.distance){if(r>=0&&"mousemove"==o.interactivity.status){if(o.interactivity.modes.bubble.size!=o.particles.size.value)if(o.interactivity.modes.bubble.size>o.particles.size.value){(l=e.radius+o.interactivity.modes.bubble.size*r)>=0&&(e.radius_bubble=l)}else{var a=e.radius-o.interactivity.modes.bubble.size,l=e.radius-a*r;e.radius_bubble=l>0?l:0}var c;if(o.interactivity.modes.bubble.opacity!=o.particles.opacity.value)if(o.interactivity.modes.bubble.opacity>o.particles.opacity.value)(c=o.interactivity.modes.bubble.opacity*r)>e.opacity&&c<=o.interactivity.modes.bubble.opacity&&(e.opacity_bubble=c);else(c=e.opacity-(o.particles.opacity.value-o.interactivity.modes.bubble.opacity)*r)<e.opacity&&c>=o.interactivity.modes.bubble.opacity&&(e.opacity_bubble=c)}}else s();"mouseleave"==o.interactivity.status&&s()}else if(o.interactivity.events.onclick.enable&&n("bubble",o.interactivity.events.onclick.mode)){if(o.tmp.bubble_clicking){t=e.x-o.interactivity.mouse.click_pos_x,i=e.y-o.interactivity.mouse.click_pos_y;var u=Math.sqrt(t*t+i*i),d=((new Date).getTime()-o.interactivity.mouse.click_time)/1e3;d>o.interactivity.modes.bubble.duration&&(o.tmp.bubble_duration_end=!0),d>2*o.interactivity.modes.bubble.duration&&(o.tmp.bubble_clicking=!1,o.tmp.bubble_duration_end=!1)}function p(t,n,i,r,s){if(t!=n)if(o.tmp.bubble_duration_end)null!=i&&(l=t+(t-(r-d*(r-t)/o.interactivity.modes.bubble.duration)),"size"==s&&(e.radius_bubble=l),"opacity"==s&&(e.opacity_bubble=l));else if(u<=o.interactivity.modes.bubble.distance){if(null!=i)var a=i;else a=r;if(a!=t){var l=r-d*(r-t)/o.interactivity.modes.bubble.duration;"size"==s&&(e.radius_bubble=l),"opacity"==s&&(e.opacity_bubble=l)}}else"size"==s&&(e.radius_bubble=void 0),"opacity"==s&&(e.opacity_bubble=void 0)}o.tmp.bubble_clicking&&(p(o.interactivity.modes.bubble.size,o.particles.size.value,e.radius_bubble,e.radius,"size"),p(o.interactivity.modes.bubble.opacity,o.particles.opacity.value,e.opacity_bubble,e.opacity,"opacity"))}},o.fn.modes.repulseParticle=function(e){if(o.interactivity.events.onhover.enable&&n("repulse",o.interactivity.events.onhover.mode)&&"mousemove"==o.interactivity.status){var t=e.x-o.interactivity.mouse.pos_x,i=e.y-o.interactivity.mouse.pos_y,r=Math.sqrt(t*t+i*i),s={x:t/r,y:i/r},a=o.interactivity.modes.repulse.distance,l=(h=1/a*(-1*Math.pow(r/a,2)+1)*a*100,m=0,g=50,Math.min(Math.max(h,m),g)),c={x:e.x+s.x*l,y:e.y+s.y*l};"bounce"==o.particles.move.out_mode?(c.x-e.radius>0&&c.x+e.radius<o.canvas.w&&(e.x=c.x),c.y-e.radius>0&&c.y+e.radius<o.canvas.h&&(e.y=c.y)):(e.x=c.x,e.y=c.y)}else if(o.interactivity.events.onclick.enable&&n("repulse",o.interactivity.events.onclick.mode))if(o.tmp.repulse_finish||(o.tmp.repulse_count++,o.tmp.repulse_count==o.particles.array.length&&(o.tmp.repulse_finish=!0)),o.tmp.repulse_clicking){a=Math.pow(o.interactivity.modes.repulse.distance/6,3);var u=o.interactivity.mouse.click_pos_x-e.x,d=o.interactivity.mouse.click_pos_y-e.y,p=u*u+d*d,f=-a/p*1;p<=a&&function(){var t=Math.atan2(d,u);if(e.vx=f*Math.cos(t),e.vy=f*Math.sin(t),"bounce"==o.particles.move.out_mode){var n={x:e.x+e.vx,y:e.y+e.vy};(n.x+e.radius>o.canvas.w||n.x-e.radius<0)&&(e.vx=-e.vx),(n.y+e.radius>o.canvas.h||n.y-e.radius<0)&&(e.vy=-e.vy)}}()}else 0==o.tmp.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i);var h,m,g},o.fn.modes.grabParticle=function(e){if(o.interactivity.events.onhover.enable&&"mousemove"==o.interactivity.status){var t=e.x-o.interactivity.mouse.pos_x,n=e.y-o.interactivity.mouse.pos_y,i=Math.sqrt(t*t+n*n);if(i<=o.interactivity.modes.grab.distance){var r=o.interactivity.modes.grab.line_linked.opacity-i/(1/o.interactivity.modes.grab.line_linked.opacity)/o.interactivity.modes.grab.distance;if(r>0){var s=o.particles.line_linked.color_rgb_line;o.canvas.ctx.strokeStyle="rgba("+s.r+","+s.g+","+s.b+","+r+")",o.canvas.ctx.lineWidth=o.particles.line_linked.width,o.canvas.ctx.beginPath(),o.canvas.ctx.moveTo(e.x,e.y),o.canvas.ctx.lineTo(o.interactivity.mouse.pos_x,o.interactivity.mouse.pos_y),o.canvas.ctx.stroke(),o.canvas.ctx.closePath()}}}},o.fn.vendors.eventsListeners=function(){"window"==o.interactivity.detect_on?o.interactivity.el=window:o.interactivity.el=o.canvas.el,(o.interactivity.events.onhover.enable||o.interactivity.events.onclick.enable)&&(o.interactivity.el.addEventListener("mousemove",(function(e){if(o.interactivity.el==window)var t=e.clientX,n=e.clientY;else t=e.offsetX||e.clientX,n=e.offsetY||e.clientY;o.interactivity.mouse.pos_x=t,o.interactivity.mouse.pos_y=n,o.tmp.retina&&(o.interactivity.mouse.pos_x*=o.canvas.pxratio,o.interactivity.mouse.pos_y*=o.canvas.pxratio),o.interactivity.status="mousemove"})),o.interactivity.el.addEventListener("mouseleave",(function(e){o.interactivity.mouse.pos_x=null,o.interactivity.mouse.pos_y=null,o.interactivity.status="mouseleave"}))),o.interactivity.events.onclick.enable&&o.interactivity.el.addEventListener("click",(function(){if(o.interactivity.mouse.click_pos_x=o.interactivity.mouse.pos_x,o.interactivity.mouse.click_pos_y=o.interactivity.mouse.pos_y,o.interactivity.mouse.click_time=(new Date).getTime(),o.interactivity.events.onclick.enable)switch(o.interactivity.events.onclick.mode){case"push":o.particles.move.enable||1==o.interactivity.modes.push.particles_nb?o.fn.modes.pushParticles(o.interactivity.modes.push.particles_nb,o.interactivity.mouse):o.interactivity.modes.push.particles_nb>1&&o.fn.modes.pushParticles(o.interactivity.modes.push.particles_nb);break;case"remove":o.fn.modes.removeParticles(o.interactivity.modes.remove.particles_nb);break;case"bubble":o.tmp.bubble_clicking=!0;break;case"repulse":o.tmp.repulse_clicking=!0,o.tmp.repulse_count=0,o.tmp.repulse_finish=!1,setTimeout((function(){o.tmp.repulse_clicking=!1}),1e3*o.interactivity.modes.repulse.duration)}}))},o.fn.vendors.densityAutoParticles=function(){if(o.particles.number.density.enable){var e=o.canvas.el.width*o.canvas.el.height/1e3;o.tmp.retina&&(e/=2*o.canvas.pxratio);var t=e*o.particles.number.value/o.particles.number.density.value_area,n=o.particles.array.length-t;n<0?o.fn.modes.pushParticles(Math.abs(n)):o.fn.modes.removeParticles(n)}},o.fn.vendors.checkOverlap=function(e,t){for(var n=0;n<o.particles.array.length;n++){var i=o.particles.array[n],r=e.x-i.x,s=e.y-i.y;Math.sqrt(r*r+s*s)<=e.radius+i.radius&&(e.x=t?t.x:Math.random()*o.canvas.w,e.y=t?t.y:Math.random()*o.canvas.h,o.fn.vendors.checkOverlap(e))}},o.fn.vendors.createSvgImg=function(e){var t=o.tmp.source_svg.replace(/#([0-9A-F]{3,6})/gi,(function(t,n,i,r){if(e.color.rgb)var o="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+e.opacity+")";else o="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+e.opacity+")";return o})),n=new Blob([t],{type:"image/svg+xml;charset=utf-8"}),i=window.URL||window.webkitURL||window,r=i.createObjectURL(n),s=new Image;s.addEventListener("load",(function(){e.img.obj=s,e.img.loaded=!0,i.revokeObjectURL(r),o.tmp.count_svg++})),s.src=r},o.fn.vendors.destroypJS=function(){cancelAnimationFrame(o.fn.drawAnimFrame),r.remove(),pJSDom=null},o.fn.vendors.drawShape=function(e,t,n,i,r,o){var s=r*o,a=r/o,l=180*(a-2)/a,c=Math.PI-Math.PI*l/180;e.save(),e.beginPath(),e.translate(t,n),e.moveTo(0,0);for(var u=0;u<s;u++)e.lineTo(i,0),e.translate(i,0),e.rotate(c);e.fill(),e.restore()},o.fn.vendors.exportImg=function(){window.open(o.canvas.el.toDataURL("image/png"),"_blank")},o.fn.vendors.loadImg=function(e){if(o.tmp.img_error=void 0,""!=o.particles.shape.image.src)if("svg"==e){var t=new XMLHttpRequest;t.open("GET",o.particles.shape.image.src),t.onreadystatechange=function(e){4==t.readyState&&(200==t.status?(o.tmp.source_svg=e.currentTarget.response,o.fn.vendors.checkBeforeDraw()):(console.log("Error pJS - Image not found"),o.tmp.img_error=!0))},t.send()}else{var n=new Image;n.addEventListener("load",(function(){o.tmp.img_obj=n,o.fn.vendors.checkBeforeDraw()})),n.src=o.particles.shape.image.src}else console.log("Error pJS - No image.src"),o.tmp.img_error=!0},o.fn.vendors.draw=function(){"image"==o.particles.shape.type?"svg"==o.tmp.img_type?o.tmp.count_svg>=o.particles.number.value?(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame)):o.tmp.img_error||(o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw)):null!=o.tmp.img_obj?(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame)):o.tmp.img_error||(o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw)):(o.fn.particlesDraw(),o.particles.move.enable?o.fn.drawAnimFrame=requestAnimFrame(o.fn.vendors.draw):cancelRequestAnimFrame(o.fn.drawAnimFrame))},o.fn.vendors.checkBeforeDraw=function(){"image"==o.particles.shape.type?"svg"==o.tmp.img_type&&null==o.tmp.source_svg?o.tmp.checkAnimFrame=requestAnimFrame(check):(cancelRequestAnimFrame(o.tmp.checkAnimFrame),o.tmp.img_error||(o.fn.vendors.init(),o.fn.vendors.draw())):(o.fn.vendors.init(),o.fn.vendors.draw())},o.fn.vendors.init=function(){o.fn.retinaInit(),o.fn.canvasInit(),o.fn.canvasSize(),o.fn.canvasPaint(),o.fn.particlesCreate(),o.fn.vendors.densityAutoParticles(),o.particles.line_linked.color_rgb_line=t(o.particles.line_linked.color)},o.fn.vendors.start=function(){n("image",o.particles.shape.type)?(o.tmp.img_type=o.particles.shape.image.src.substr(o.particles.shape.image.src.length-3),o.fn.vendors.loadImg(o.tmp.img_type)):o.fn.vendors.checkBeforeDraw()},o.fn.vendors.eventsListeners(),o.fn.vendors.start()};function t(e){e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,i){return t+t+n+n+i+i}));var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null}function n(e,t){return t.indexOf(e)>-1}Object.deepExtend=function(e,t){for(var n in t)t[n]&&t[n].constructor&&t[n].constructor===Object?(e[n]=e[n]||{},arguments.callee(e[n],t[n])):e[n]=t[n];return e},window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},window.cancelRequestAnimFrame=window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout,window.pJSDom=[],window.particlesJS=function(t,n){"string"!=typeof t&&(n=t,t="particles-js"),t||(t="particles-js");var i=document.getElementById(t),r="particles-js-canvas-el",o=i.getElementsByClassName(r);if(o.length)for(;o.length>0;)i.removeChild(o[0]);var s=document.createElement("canvas");s.className=r,s.style.width="100%",s.style.height="100%",null!=document.getElementById(t).appendChild(s)&&pJSDom.push(new e(t,n))},window.particlesJS.load=function(e,t,n){var i=new XMLHttpRequest;i.open("GET",t),i.onreadystatechange=function(t){if(4==i.readyState)if(200==i.status){var r=JSON.parse(t.currentTarget.response);window.particlesJS(e,r),n&&n()}else console.log("Error pJS - XMLHttpRequest status: "+i.status),console.log("Error pJS - File config not found")},i.send()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,